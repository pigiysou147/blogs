import{_ as e,c as a,o as t,b as i}from"./app-jraesLnh.js";const r={},o=i(`<h1 id="延迟加载图片和-iframe-元素" tabindex="-1"><a class="header-anchor" href="#延迟加载图片和-iframe-元素"><span>延迟加载图片和 <code>&lt;iframe&gt;</code> 元素</span></a></h1><p>与其他类型的资源相比，图片和 <code>&lt;iframe&gt;</code> 元素消耗的带宽通常更多。对于 <code>&lt;iframe&gt;</code> 元素，加载和渲染其中的页面可能会消耗相当多的额外处理时间。</p><p>在延迟加载图片的情况下，延迟加载初始视口以外的图片有助于减少初始视口内更关键资源的带宽争用情况。在某些情况下，网络连接状况不佳时，这有助于提高网页的 <a href="https://web.dev/articles/lcp" target="_blank" rel="noopener noreferrer">Largest Contentful Paint (LCP)</a>，并且重新分配的带宽有助于加快 <a href="https://web.dev/articles/lcp#what-elements-are-considered" target="_blank" rel="noopener noreferrer">LCP 候选版本</a>的加载和绘制速度。</p><p>就 <code>&lt;iframe&gt;</code> 元素而言，您可以在启动期间通过延迟加载网页的 <a href="https://web.dev/articles/inp" target="_blank" rel="noopener noreferrer">Interaction to Next Paint (INP)</a> 来改进这些元素。这是因为 <code>&lt;iframe&gt;</code> 是完全独立的 HTML 文档，拥有自己的子资源。虽然 <code>&lt;iframe&gt;</code> 元素可以在单独的进程中运行，但它们与其他线程共享进程的情况并不少见，这可能会造成页面对用户输入的响应速度下降的情况。</p><p>因此，推迟加载屏幕外图片和 <code>&lt;iframe&gt;</code> 元素是一种值得尝试的技术，并且只需相当少量的工作即可获得相对良好的性能回报。本单元将介绍如何延迟加载这两类元素，以便在页面的关键启动期内提供更快、更好的用户体验。</p><h2 id="使用-loading-属性延迟加载图片" tabindex="-1"><a class="header-anchor" href="#使用-loading-属性延迟加载图片"><span>使用 <code>loading</code> <strong>属性延迟加载图片</strong></span></a></h2><p>可以将 <a href="https://developer.mozilla.org/docs/Web/HTML/Element/iframe#attributes" target="_blank" rel="noopener noreferrer"><code>loading</code> 属性</a>添加到 <code>&lt;img&gt;</code> 元素中，以告知浏览器应如何加载这些元素：</p><ul><li><code>&quot;eager&quot;</code> 用于告知浏览器应立即加载图片，即使图片位于初始视口之外。这也是 <code>loading</code> 属性的默认值。</li><li><code>&quot;lazy&quot;</code> 会延迟图片加载，直到图片与可见视口之间的距离保持在设定的范围内。此距离因浏览器而异，但通常设置得足够大，以便在用户滚动到图片时加载图片。</li></ul><p><strong>重要提示</strong> ：如前所述，浏览器决定使用 <code>loading=&quot;lazy&quot;</code> 属性时，<a href="https://web.dev/articles/browser-level-image-lazy-loading#distance-from-viewport_thresholds" target="_blank" rel="noopener noreferrer">视口与视口的距离</a>因浏览器而异。涉及的因素可能包括<a href="https://googlechrome.github.io/samples/network-information/" target="_blank" rel="noopener noreferrer">有效连接类型</a>和图片类型。另外值得注意的是，如果您使用的是 <code>&lt;picture&gt;</code> 元素，则 <code>loading</code> 属性仍应应用于其子级 <code>&lt;img&gt;</code> 元素，而不是 <code>&lt;picture&gt;</code> 元素本身。这是因为 <code>&lt;picture&gt;</code> 元素是一个容器，其中包含指向不同候选图片的其他 <code>&lt;source&gt;</code> 元素，并且浏览器选择的候选图片会直接应用于其子级 <code>&lt;img&gt;</code> 元素。</p><h3 id="不要延迟加载初始视口中的图片" tabindex="-1"><a class="header-anchor" href="#不要延迟加载初始视口中的图片"><span>不要延迟加载初始视口中的图片</span></a></h3><p>您只能为位于初始视口之外的 <code>&lt;img&gt;</code> 元素添加 <code>loading=&quot;lazy&quot;</code> 属性。不过，在呈现网页之前知道元素在视口中的确切位置可能并非易事。必须考虑不同的视口大小、宽高比和设备。</p><p>例如，桌面设备视口与手机上的视口可能截然不同，因为前者会呈现更多的垂直空间，而这些空间或许能够适应初始视口中的图片，而这些图片在尺寸较小设备的初始视口中不会显示。<a href="https://en.wikipedia.org/wiki/Page_orientation" target="_blank" rel="noopener noreferrer">纵向模式</a>使用的平板电脑还会显示大量的垂直空间，甚至可能比某些桌面设备更多。</p><p>不过，在某些情况下，很明显应该避免应用 <code>loading=&quot;lazy&quot;</code>。例如，如果是主打图片，或者存在 <code>&lt;img&gt;</code> 元素可能显示在任何设备上的首屏或布局顶部的其他图片用例，您绝对应该从 <code>&lt;img&gt;</code> 元素中省略 <code>loading=&quot;lazy&quot;</code> 属性。这<a href="https://web.dev/articles/lcp-lazy-loading" target="_blank" rel="noopener noreferrer">对于可能是 LCP 候选内容的映像而言更为重要</a>。</p><p>延迟加载的图片需要等待浏览器完成布局，才能知道图片的最终位置是否在视口内。<a href="https://web.dev/articles/howbrowserswork#layout" target="_blank" rel="noopener noreferrer"></a>这意味着，如果可见视口中的 <code>&lt;img&gt;</code> 元素具有 <code>loading=&quot;lazy&quot;</code> 属性，则只有在下载、解析并应用于网页之后才会请求此属性，而不是在<a href="https://web.dev/articles/preload-scanner#whats_a_preload_scanner" target="_blank" rel="noopener noreferrer">在原始标记中被预加载扫描器发现</a>后立即提取。</p><p>由于 <a href="https://caniuse.com/loading-lazy-attr" target="_blank" rel="noopener noreferrer"><code>&lt;img&gt;</code> 元素的 <code>loading</code> 属性在所有主流浏览器上均受支持</a>，因此无需使用 JavaScript 延迟加载图片，因为向页面添加额外的 JavaScript 来提供浏览器已提供的功能会影响页面性能的其他方面，例如 INP。</p><p><strong>注意</strong> ：<code>loading</code> 属性不会影响映像的网络优先级。如需调整网络优先级，您可以使用 <a href="https://web.dev/articles/fetch-priority" target="_blank" rel="noopener noreferrer">Fetch Priority API</a>。请注意，可见视口中带有 <code>fetchpriority=&quot;high&quot;</code> 和 <code>loading=&quot;lazy&quot;</code> 的图片仍会等到所有 CSS 都下载并解析后再执行。### 图片延迟加载演示</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi" loading="lazy" src="https://glitch.com/embed/#!/embed/learn-performance-defer-images?attributionHidden=true&amp;sidebarCollapsed=true&amp;previewSize=100" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Glitch 上的 learn-performance-defer-images"></iframe><h2 id="延迟加载-iframe-元素" tabindex="-1"><a class="header-anchor" href="#延迟加载-iframe-元素"><span>延迟加载 <code>&lt;iframe&gt;</code> <strong>元素</strong></span></a></h2><p>延迟加载 <code>&lt;iframe&gt;</code> 元素，直到它们在视口中可见为止，这样可以节省大量数据，并提高加载顶级网页所需的关键资源的加载速度。此外，由于 <code>&lt;iframe&gt;</code> 元素本质上是顶级文档中加载的完整 HTML 文档，因此它们可以包含大量子资源（尤其是 JavaScript），如果这些帧中的任务需要大量处理时间，则会严重影响页面的 INP。</p><p>第三方嵌入是 <code>&lt;iframe&gt;</code> 元素的常见用例。例如，嵌入式视频播放器或社交媒体帖子通常使用 <code>&lt;iframe&gt;</code> 元素，它们通常需要大量的子资源，这也会导致顶级页面资源的带宽争用。例如，延迟加载 YouTube 视频嵌入内容可在页面初始加载期间节省超过 500 KiB，而延迟加载 Facebook <a href="https://developers.facebook.com/docs/plugins/like-button/" target="_blank" rel="noopener noreferrer">“赞”按钮插件</a>可节省超过 200 KiB，其中大部分是 JavaScript。</p><p>无论采用哪种方式，只要您在网页上的首屏显示 <code>&lt;iframe&gt;</code>，如果提前加载并不重要，就应该强烈考虑延迟加载，因为这样做可以显著改善用户体验。</p><h3 id="iframe-元素的-loading-属性" tabindex="-1"><a class="header-anchor" href="#iframe-元素的-loading-属性"><span><code>&lt;iframe&gt;</code> <strong>元素的</strong> <code>loading</code> <strong>属性</strong></span></a></h3><p>所有主流浏览器也都支持 <code>&lt;iframe&gt;</code> 元素上的 <a href="https://developer.mozilla.org/docs/Web/HTML/Element/iframe#attributes" target="_blank" rel="noopener noreferrer"><code>loading</code> 属性</a>。<code>loading</code> 属性的值及其行为与使用 <code>loading</code> 属性的 <code>&lt;img&gt;</code> 元素相同：</p><ul><li><code>&quot;eager&quot;</code> 为默认值。它会告知浏览器立即加载 <code>&lt;iframe&gt;</code> 元素的 HTML 及其子资源。</li><li><code>&quot;lazy&quot;</code> 会延迟加载 <code>&lt;iframe&gt;</code> 元素的 HTML 及其子资源，直到该元素与视口之间的距离在预定义的距离以内。</li></ul><p><strong>注意</strong> ：为避免布局偏移，Chrome 会预留空间，并在系统仍然提取延迟加载的 <code>&lt;iframe&gt;</code> 时显示占位符。不过，您仍应考虑使用 <code>&lt;iframe&gt;</code> 元素的 <code>width</code> 和 <code>height</code> 属性，以及 CSS 中的其他样式，以最大限度地减少布局偏移。### 延迟加载 iframe 演示</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi" loading="lazy" src="https://glitch.com/embed/#!/embed/learn-performance-defer-iframes?attributionHidden=true&amp;sidebarCollapsed=true&amp;previewSize=100" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Glitch 上的“learn-performance-defer-iframe”"></iframe><h3 id="外墙" tabindex="-1"><a class="header-anchor" href="#外墙"><span>外墙</span></a></h3><p>您可以按需加载内容，而不是在网页加载期间立即加载嵌入内容，以响应用户互动。这可以通过在用户与图片互动之前显示图片或其他适当的 HTML 元素来实现。用户与该元素互动后，您可以将其替换为第三方嵌入代码。这种技术称为“表层”。<a href="https://web.dev/articles/embed-best-practices#use_click-to-load_to_enhance_facades" target="_blank" rel="noopener noreferrer"></a></p><p>Facade 的一个常见用例是来自第三方服务的视频嵌入，在此嵌入中，除了视频内容本身之外，可能还会加载许多其他可能昂贵的子资源（如 JavaScript）。在这种情况下（除非合理需要视频自动播放），否则视频嵌入需要用户在播放之前点击播放按钮来与之互动。</p><p>这是一个绝佳机会，可以显示视觉上与嵌入的视频相似的静态图片，并在此过程中节省大量带宽。用户点击图片后，该图片会被实际的 <code>&lt;iframe&gt;</code> 嵌入所取代，这会触发第三方 <code>&lt;iframe&gt;</code> 元素的 HTML 及其子资源开始下载。</p><p>除了改善初始网页加载情况之外，另一个关键的益处在于，如果用户从未播放视频，那么系统也永远不会下载播放视频所需的资源。这是一种很好的模式，因为它可以确保用户只下载他们真正需要的内容，而不会对用户需求做出错误的假设。</p><p>聊天 widget 是 Facade 技术的另一个优秀用例。大多数聊天微件会下载大量 JavaScript，这可能会对网页加载和对用户输入的响应速度产生负面影响。与预先加载任何内容一样，在加载时会产生开销，但就聊天微件而言，并非所有用户都不想与它交互。</p><p>另一方面，可以使用 Facade 将第三方“Start Chat”按钮替换为虚假按钮。当用户有意义地与其交互（例如将指针悬停在它上一段时间或点击它上）后，系统会在用户需要这个实际可用的聊天 widget 时将其放入相应位置。</p><p>虽然您当然可以构建自己的 Facade，但还有一些适用于更热门第三方的开源选项，例如适用于 YouTube 视频的 <a href="https://github.com/paulirish/lite-youtube-embed" target="_blank" rel="noopener noreferrer"><code>lite-youtube-embed</code></a>、适用于 Vimeo 视频的 <a href="https://github.com/luwes/lite-vimeo-embed" target="_blank" rel="noopener noreferrer"><code>lite-vimeo-embed</code></a> 以及适用于聊天 widget 的 <a href="https://github.com/calibreapp/react-live-chat-loader" target="_blank" rel="noopener noreferrer">React 实时聊天加载程序</a>。</p><h2 id="javascript-延迟加载库" tabindex="-1"><a class="header-anchor" href="#javascript-延迟加载库"><span>JavaScript 延迟加载库</span></a></h2><p>如果您需要延迟加载 <code>&lt;video&gt;</code> 元素、<code>&lt;video&gt;</code> 元素 <code>poster</code> 图片、CSS <code>background-image</code> 属性加载的图片或其他不受支持的元素，可以使用基于 JavaScript 的延迟加载解决方案（例如 <a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="noopener noreferrer">lazysizes</a> 或 <a href="https://github.com/malchata/yall.js" target="_blank" rel="noopener noreferrer">yall.js</a>）执行此操作，因为延迟加载这些类型的资源并不是浏览器级别的功能。</p><p>具体而言，在没有音轨的情况下自动播放和循环播放 <code>&lt;video&gt;</code> 元素是<a href="https://web.dev/articles/replace-gifs-with-videos" target="_blank" rel="noopener noreferrer">比使用动画 GIF 更高效的替代方案</a>，动画 GIF 通常比具有同等视觉质量的视频资源大好几倍。即便如此，这些视频在带宽方面仍然很重要，因此延迟加载它们是一项额外的优化措施，可以大大减少浪费的带宽。</p><p>其中大多数库都使用 <a href="https://developer.mozilla.org/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener noreferrer">Intersection Observer API</a>，如果网页的 HTML 在初始加载后发生变化，则使用 <a href="https://developer.mozilla.org/docs/Web/API/MutationObserver" target="_blank" rel="noopener noreferrer">Mutation Observer API</a> 来识别元素何时进入用户的视口。如果图片可见或接近视口，JavaScript 库会将非标准属性（通常是 <code>data-src</code> 或类似属性）替换为正确的属性，例如 <code>src</code>。</p><p>假设您有一个用于替换动画 GIF 的视频，但您想使用 JavaScript 解决方案延迟加载它。<a href="https://github.com/malchata/yall.js#video" target="_blank" rel="noopener noreferrer">通过 yall.js 可以实现这一点</a>，采用的标记模式如下：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!-- The autoplay, loop, muted, and playsinline attributes are to</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     ensure the video can autoplay without user intervention. --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lazy&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> autoplay</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> loop</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> muted</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> playsinline</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;320&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;480&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.webm&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video/webm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.mp4&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video/mp4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，yall.js 会观察类 <code>&quot;lazy&quot;</code> 的所有符合条件的 HTML 元素。在网页上加载并执行 yall.js 后，除非用户将其滚动到视口中，否则视频不会加载。此时，<code>&lt;video&gt;</code> 元素的子 <code>&lt;source&gt;</code> 元素中的 <code>data-src</code> 属性将交换为 <code>src</code> 属性，后者会发送下载视频并自动开始播放的请求。</p>`,41),l=[o];function s(n,d){return t(),a("div",null,l)}const p=e(r,[["render",s],["__file","lazy-load-images-and-iframe-elements.html.vue"]]),h=JSON.parse('{"path":"/web/performance/lazy-load-images-and-iframe-elements.html","title":"延迟加载图片和 <iframe> 元素","lang":"zh-CN","frontmatter":{"date":"2023-02-01T00:00:00.000Z","category":"性能优化","tags":["延迟加载"],"description":"延迟加载图片和 <iframe> 元素 与其他类型的资源相比，图片和 <iframe> 元素消耗的带宽通常更多。对于 <iframe> 元素，加载和渲染其中的页面可能会消耗相当多的额外处理时间。 在延迟加载图片的情况下，延迟加载初始视口以外的图片有助于减少初始视口内更关键资源的带宽争用情况。在某些情况下，网络连接状况不佳时，这有助于提高网页的 Larg...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/performance/lazy-load-images-and-iframe-elements.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"延迟加载图片和 <iframe> 元素"}],["meta",{"property":"og:description","content":"延迟加载图片和 <iframe> 元素 与其他类型的资源相比，图片和 <iframe> 元素消耗的带宽通常更多。对于 <iframe> 元素，加载和渲染其中的页面可能会消耗相当多的额外处理时间。 在延迟加载图片的情况下，延迟加载初始视口以外的图片有助于减少初始视口内更关键资源的带宽争用情况。在某些情况下，网络连接状况不佳时，这有助于提高网页的 Larg..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T07:14:05.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"延迟加载"}],["meta",{"property":"article:published_time","content":"2023-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T07:14:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"延迟加载图片和 <iframe> 元素\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T07:14:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"使用 loading 属性延迟加载图片","slug":"使用-loading-属性延迟加载图片","link":"#使用-loading-属性延迟加载图片","children":[{"level":3,"title":"不要延迟加载初始视口中的图片","slug":"不要延迟加载初始视口中的图片","link":"#不要延迟加载初始视口中的图片","children":[]}]},{"level":2,"title":"延迟加载 <iframe> 元素","slug":"延迟加载-iframe-元素","link":"#延迟加载-iframe-元素","children":[{"level":3,"title":"<iframe> 元素的 loading 属性","slug":"iframe-元素的-loading-属性","link":"#iframe-元素的-loading-属性","children":[]},{"level":3,"title":"外墙","slug":"外墙","link":"#外墙","children":[]}]},{"level":2,"title":"JavaScript 延迟加载库","slug":"javascript-延迟加载库","link":"#javascript-延迟加载库","children":[]}],"git":{"createdTime":1724483645000,"updatedTime":1724483645000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":1}]},"readingTime":{"minutes":10.07,"words":3022},"filePathRelative":"web/performance/lazy-load-images-and-iframe-elements.md","localizedDate":"2023年2月1日","excerpt":"\\n<p>与其他类型的资源相比，图片和 <code>&lt;iframe&gt;</code> 元素消耗的带宽通常更多。对于 <code>&lt;iframe&gt;</code> 元素，加载和渲染其中的页面可能会消耗相当多的额外处理时间。</p>\\n<p>在延迟加载图片的情况下，延迟加载初始视口以外的图片有助于减少初始视口内更关键资源的带宽争用情况。在某些情况下，网络连接状况不佳时，这有助于提高网页的 <a href=\\"https://web.dev/articles/lcp\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Largest Contentful Paint (LCP)</a>，并且重新分配的带宽有助于加快 <a href=\\"https://web.dev/articles/lcp#what-elements-are-considered\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LCP 候选版本</a>的加载和绘制速度。</p>","autoDesc":true}');export{p as comp,h as data};
