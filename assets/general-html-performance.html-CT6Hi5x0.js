import{_ as e,c as r,o as t,b as a}from"./app-Be6S8-JU.js";const i={},o=a('<h1 id="html-性能的一般注意事项" tabindex="-1"><a class="header-anchor" href="#html-性能的一般注意事项"><span>HTML 性能的一般注意事项</span></a></h1><p>要想构建可快速加载的网站，第一步就是要及时从服务器接收网页 HTML 的响应。当您在浏览器的地址栏中输入网址时，浏览器会向服务器发送 <a href="https://developer.mozilla.org/docs/Web/HTTP/Methods/GET" target="_blank" rel="noopener noreferrer"><code>GET</code> 请求</a>进行检索。网页的第一个请求针对的是 HTML 资源，因此，确保 HTML 以最短延迟快速到达是关键性能目标。</p><p>初始的 HTML 请求需要执行几个步骤，每个步骤都需要一些时间。通过减少在每个步骤上花费的时间，您可以缩短<a href="https://web.dev/articles/ttfb" target="_blank" rel="noopener noreferrer">首字节时间 (TTFB)</a>。虽然 TTFB 不是您在页面加载速度方面应该关注的唯一指标，但较高的 TTFB <em>确实</em>会让您难以达到 <a href="https://web.dev/articles/lcp" target="_blank" rel="noopener noreferrer">Largest Contentful Paint (LCP)</a> 和 <a href="https://web.dev/articles/fcp" target="_blank" rel="noopener noreferrer">First Contentful Paint (FCP)</a> 等指标的指定“良好”阈值。</p><p><strong>注意</strong> ：如需详细了解如何优化网站的 TTFB，请参阅<a href="https://web.dev/articles/optimize-ttfb" target="_blank" rel="noopener noreferrer">优化 TTFB 指南</a>，因为有一些改进技术不在本单元的讨论范围内。## 尽量减少重定向</p><p>在请求资源时，服务器可能会做出一个重定向响应，该重定向可以是永久重定向（<code>301 Moved Permanently</code> 响应）或临时重定向（<code>302 Found</code> 响应）。</p><p>重定向会降低网页加载速度，因为它需要浏览器在新位置发出额外的 HTTP 请求来检索资源。重定向有两种类型：</p><ol><li>完全发生在源站内的 <em>同源重定向</em> 。这些类型的重定向完全由您控制，因为管理它们的逻辑完全位于您的 Web 服务器上。</li><li>由其他源启动的 <em>跨域重定向</em> 。这些类型的重定向通常无法控制。</li></ol><p>广告、网址缩短服务和其他第三方服务通常会使用跨源重定向。虽然跨源重定向超出了您的控制范围，但您可能仍需要检查是否避免了多次重定向。例如，将广告链接到 HTTP 网页，而该网页又重定向到其 HTTPS 等效网页，或者跨源重定向到达您的来源，但随后触发同源重定向。</p><p><strong>注意</strong> ：常见的同源重定向模式是将用户从以尾随斜杠结尾的网址重定向到非尾随斜杠，反之亦然，例如将用户从 <code>example.com/page/</code> 重定向到 <code>example.com/page</code>。在网页之间创建内部链接时，应避免链接到通过重定向进行响应且直接链接到正确位置的网页。## 缓存 HTML 响应</p><p>缓存 HTML 响应很困难，因为响应可能包含指向其他关键资源（例如 CSS、JavaScript、图片和其他资源类型）的链接。这些资源的文件名中可能包含<a href="https://bundlers.tooling.report/hashing/" target="_blank" rel="noopener noreferrer">唯一指纹</a>，该指纹会根据文件的内容而变化。这意味着，缓存的 HTML 文档可能会在部署后变得过时，因为它包含对过时子资源的引用。</p><p>不过，较短的缓存生命周期（而不是不缓存）具有诸多优势，例如允许在 CDN 中缓存资源，减少从源服务器传送的请求数量，以及在浏览器中传送资源，从而重新验证资源而不是再次下载。此方法最适合在任何上下文中不会更改的静态内容，并且可以将缓存资源的适当时间设置为您认为合适的分钟数。将静态 HTML 资源花五分钟的时间是一个可靠的选择，可以确保定期更新不会引起注意。</p><p>如果网页的 HTML 内容以某种方式进行了个性化（例如针对经过身份验证的用户），那么您很有可能因各种问题（包括安全性和新鲜度）而根本不想缓存内容。如果用户浏览器缓存了 HTML 响应，您就无法使缓存失效。因此，在此类情况下，最好避免完全缓存 HTML。</p><p>缓存 HTML 的一种审慎方法是使用 <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/ETag" target="_blank" rel="noopener noreferrer"><code>ETag</code></a> 或 <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Last-Modified" target="_blank" rel="noopener noreferrer"><code>Last-Modified</code></a> 响应标头。<code>ETag</code>（也称为实体标记）标头是一个标识符，用于唯一标识所请求资源，通常使用<a href="https://en.wikipedia.org/wiki/Hash_function" target="_blank" rel="noopener noreferrer">资源内容的哈希值</a>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ETag:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>每当资源发生变化时，都必须生成新的 <code>ETag</code> 值。在后续请求中，浏览器会通过 <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/If-None-Match" target="_blank" rel="noopener noreferrer"><code>If-None-Match</code> 请求标头</a>发送 <code>ETag</code> 值。如果服务器上的 <code>ETag</code> 与浏览器发送的 <code>ETag</code> 匹配，服务器会返回 <code>304 Not Modified</code> 响应，浏览器则会使用缓存中的资源。虽然这仍然会导致网络延迟，但 <code>304 Not Modified</code> 响应比整个 HTML 资源小得多。</p><p>但是，重新验证资源的新鲜度涉及的网络延迟也本身也是一个缺点。与 Web 开发的许多其他方面一样，利弊和妥协是不可避免的。您可以自行决定以这种方式缓存 HTML 的额外工作是否值得，或者最好是谨慎操作，不必费心缓存 HTML 内容。</p><p><strong>注意</strong> ：<code>Last-Modified</code> 标头的运作方式与之类似，即包含一个包含资源上次更新日期和时间的响应标头。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi" loading="lazy" src="https://glitch.com/embed/#!/embed/learn-performance-caching?attributionHidden=true&amp;sidebarCollapsed=true&amp;previewSize=100" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="在 Glitch 上学习性能缓存"></iframe><h2 id="测量服务器响应时间" tabindex="-1"><a class="header-anchor" href="#测量服务器响应时间"><span>测量服务器响应时间</span></a></h2><p>如果响应未缓存，则服务器的响应时间在很大程度上取决于您的托管服务提供商和后端应用堆栈。与动态网页相比，提供动态生成的响应（例如从数据库获取数据）的网页的 TTFB 可能更高，无需在后端投入大量计算时间即可立即提供。如果显示加载旋转图标，然后在客户端提取所有数据，则会将工作从更加可预测的服务器端环境移至可能不可预测的客户端环境。最大限度地减少客户端工作量通常可以改进以用户为中心的指标。</p><p>如果用户在<a href="https://web.dev/articles/lab-and-field-data-differences#field_data" target="_blank" rel="noopener noreferrer">字段</a>遇到 TTFB 缓慢的问题，您可以使用 <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Server-Timing" target="_blank" rel="noopener noreferrer"><code>Server-Timing</code> 响应标头</a>公开有关时间在服务器上的什么位置的信息：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Server-Timing:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> auth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dur</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">55.5,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dur</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">220</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Server-Timing</code> 标头的值可以包含多个指标，以及每个指标的时长。然后，可以<a href="https://web.dev/articles/navigation-and-resource-timing" target="_blank" rel="noopener noreferrer">在现场使用 Navigation Timing API</a> 从用户那里收集这些数据，并进行分析，以了解用户是否遇到延迟。在前面的代码段中，响应标头包含两个显示时间：</p><ul><li>对用户进行身份验证的时间 (<code>auth</code>)，用时 55.5 毫秒。</li><li>数据库访问时间 (<code>db</code>)，用时 220 毫秒。</li></ul><p><strong>注意</strong> ：如需详细了解 <code>Server-Timing</code> 响应标头，请参阅<a href="https://web.dev/articles/optimize-ttfb#understanding_high_ttfb_with_server_timing" target="_blank" rel="noopener noreferrer">优化 TTFB 指南</a>。您可能还需要检查您的托管基础架构，并确认您拥有足够的资源来处理网站收到的流量。共享托管服务提供商通常容易出现 TTFB 较高，而响应时间较短的专用解决方案的费用可能更高。</p><p>您可以在 <a href="https://ismyhostfastyet.com/" target="_blank" rel="noopener noreferrer">ismyhostfastyet.com</a> 上比较热门托管服务提供商的 TTFB。这些数据由从 <a href="https://developer.chrome.com/docs/crux" target="_blank" rel="noopener noreferrer">Chrome 用户体验报告 (CrUX)</a> 数据集中收集的真实用户体验组成。## 压缩</p><p>基于文本的响应（例如 HTML、JavaScript、CSS 和 SVG 图片）应进行压缩，以减小通过网络传输时的大小，从而加快其下载速度。最常用的压缩算法是 gzip 和 Brotli。Brotli 比 gzip 提高了约 15% 到 20%。</p><p>大多数网站托管服务提供商通常会自动设置压缩功能，但如果您希望自行配置或调整压缩设置，则需要考虑一些重要事项：</p><ol><li><strong>尽可能使用 Brotli。</strong> 如前所述，Brotli 比 gzip 提供了相当明显的改进，并且<a href="https://caniuse.com/brotli" target="_blank" rel="noopener noreferrer">所有主流浏览器都支持 Brotli</a>。尽可能使用 Brotli，但如果网站有大量用户在旧版浏览器中使用，请确保将 gzip 用作后备选项，因为任何压缩都比不进行压缩要好。</li><li><strong>文件大小至关重要。</strong> 非常小的资源（小于 1 KiB）压缩得不太好，有时甚至根本压缩不到。任何类型的数据压缩的效果都取决于能够使用压缩算法找到更多可压缩数据位的大量数据。文件越大，压缩效果就越好，但是，您不会仅仅因为压缩效率更高就提供非常大的资源。大型资源（如 JavaScript 和 CSS）在浏览器<em>解压缩</em>后，需要大量时间来解析和评估，并且，即使它们仅发生微小变化，变化频率也可能会更高，因为任何更改都会导致不同的<a href="https://bundlers.tooling.report/hashing/" target="_blank" rel="noopener noreferrer">文件哈希值</a>。</li><li><strong>了解动态压缩和静态压缩。</strong> 动态压缩和静态压缩是确定何时应压缩资源的不同方法。动态压缩会在请求资源时压缩资源，有时甚至在每次请求资源时压缩资源。另一方面，静态压缩会提前压缩文件，因此在收到请求时无需执行压缩。静态压缩消除了压缩本身涉及的延迟时间，在使用动态压缩的情况下，这可能会增加服务器响应时间。JavaScript、CSS 和 SVG 图片等静态资源应动态压缩，而 HTML 资源（<em>尤其是</em>为经过身份验证的用户动态生成的资源）应动态压缩。</li></ol><p>自行进行压缩非常具有挑战性，通常最好让内容分发网络 (CDN)（将在下一部分讨论）为您处理此操作。但是，了解这些概念有助于您辨别您的托管服务提供商是否正确使用了压缩功能。这些信息可帮助您找到改进压缩设置的机会，使它们为您的网站带来最大收益。</p><h2 id="内容分发网络-cdn" tabindex="-1"><a class="header-anchor" href="#内容分发网络-cdn"><span>内容分发网络 (CDN)</span></a></h2><p><a href="https://web.dev/articles/content-delivery-networks" target="_blank" rel="noopener noreferrer">内容分发网络 (CDN)</a> 是分布式服务器网络，服务器从源服务器缓存资源，反过来再从物理上更靠近用户的边缘服务器传送资源。在距离用户较近时，可以缩短<a href="https://en.wikipedia.org/wiki/Round-trip_delay" target="_blank" rel="noopener noreferrer">往返时间 (RTT)</a>，而 HTTP/2 或 HTTP/3、缓存和压缩等优化技术则可以让 CDN 更快地提供内容，而不是从源服务器提取内容。在某些情况下，使用 CDN 可以显著改善网站的 TTFB。</p><p><strong>注意</strong> ：如需深入了解 CDN 及其优势，请参阅 <a href="https://web.dev/articles/content-delivery-networks" target="_blank" rel="noopener noreferrer">CDN 指南</a>。## 知识测验</p>',33),n=[o];function l(s,p){return t(),r("div",null,n)}const h=e(i,[["render",l],["__file","general-html-performance.html.vue"]]),c=JSON.parse('{"path":"/web/performance/general-html-performance.html","title":"HTML 性能的一般注意事项","lang":"zh-CN","frontmatter":{"date":"2023-02-01T00:00:00.000Z","category":"性能优化","tags":["html"],"description":"HTML 性能的一般注意事项 要想构建可快速加载的网站，第一步就是要及时从服务器接收网页 HTML 的响应。当您在浏览器的地址栏中输入网址时，浏览器会向服务器发送 GET 请求进行检索。网页的第一个请求针对的是 HTML 资源，因此，确保 HTML 以最短延迟快速到达是关键性能目标。 初始的 HTML 请求需要执行几个步骤，每个步骤都需要一些时间。通过...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/performance/general-html-performance.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"HTML 性能的一般注意事项"}],["meta",{"property":"og:description","content":"HTML 性能的一般注意事项 要想构建可快速加载的网站，第一步就是要及时从服务器接收网页 HTML 的响应。当您在浏览器的地址栏中输入网址时，浏览器会向服务器发送 GET 请求进行检索。网页的第一个请求针对的是 HTML 资源，因此，确保 HTML 以最短延迟快速到达是关键性能目标。 初始的 HTML 请求需要执行几个步骤，每个步骤都需要一些时间。通过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T07:14:05.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"html"}],["meta",{"property":"article:published_time","content":"2023-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T07:14:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTML 性能的一般注意事项\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T07:14:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"测量服务器响应时间","slug":"测量服务器响应时间","link":"#测量服务器响应时间","children":[]},{"level":2,"title":"内容分发网络 (CDN)","slug":"内容分发网络-cdn","link":"#内容分发网络-cdn","children":[]}],"git":{"createdTime":1724483645000,"updatedTime":1724483645000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":1}]},"readingTime":{"minutes":9.25,"words":2776},"filePathRelative":"web/performance/general-html-performance.md","localizedDate":"2023年2月1日","excerpt":"\\n<p>要想构建可快速加载的网站，第一步就是要及时从服务器接收网页 HTML 的响应。当您在浏览器的地址栏中输入网址时，浏览器会向服务器发送 <a href=\\"https://developer.mozilla.org/docs/Web/HTTP/Methods/GET\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>GET</code> 请求</a>进行检索。网页的第一个请求针对的是 HTML 资源，因此，确保 HTML 以最短延迟快速到达是关键性能目标。</p>\\n<p>初始的 HTML 请求需要执行几个步骤，每个步骤都需要一些时间。通过减少在每个步骤上花费的时间，您可以缩短<a href=\\"https://web.dev/articles/ttfb\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">首字节时间 (TTFB)</a>。虽然 TTFB 不是您在页面加载速度方面应该关注的唯一指标，但较高的 TTFB <em>确实</em>会让您难以达到 <a href=\\"https://web.dev/articles/lcp\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Largest Contentful Paint (LCP)</a> 和 <a href=\\"https://web.dev/articles/fcp\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">First Contentful Paint (FCP)</a> 等指标的指定“良好”阈值。</p>","autoDesc":true}');export{h as comp,c as data};
