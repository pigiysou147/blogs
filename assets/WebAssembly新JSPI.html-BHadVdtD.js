import{_ as e,c as s,o as i,b as a}from"./app-BVIo3aAP.js";const n={},t=a(`<p>WebAssembly 的 JavaScript Promise Integration (JSPI) API 迎来了新的更新，已在 Chrome M126 版本中上线。本文将讨论此次更新的内容、如何在 Emscripten 中使用该 API 以及 JSPI 的未来发展路线。</p><p>JSPI 是一个 API，允许使用<strong>顺序</strong>API 的 WebAssembly 应用程序访问<strong>异步</strong>的 Web API。许多 Web API 是通过 JavaScript <code>Promise</code> 对象实现的：这些 API 在执行操作时并不会立即完成，而是返回一个 <code>Promise</code> 来表示操作的完成。而许多编译成 WebAssembly 的应用程序则来自 C/C++ 领域，后者通常使用的是会阻塞调用者直到完成的 API。</p><p>JSPI 通过连接到 Web 架构，允许 WebAssembly 应用程序在 <code>Promise</code> 返回时暂停执行，并在 <code>Promise</code> 解决后继续执行。</p><p>关于 JSPI 的更多信息及其使用方法，您可以参考 <a href="https://v8.dev/blog/jspi" target="_blank" rel="noopener noreferrer">这篇博客文章</a> 以及 <a href="https://github.com/WebAssembly/js-promise-integration" target="_blank" rel="noopener noreferrer">规范</a>。</p><h2 id="更新了什么" tabindex="-1"><a class="header-anchor" href="#更新了什么"><span>更新了什么？</span></a></h2><h3 id="suspender-对象的终结" tabindex="-1"><a class="header-anchor" href="#suspender-对象的终结"><span><code>Suspender</code> 对象的终结</span></a></h3><p>2024 年 1 月，Wasm CG 的 Stacks 小组 <a href="https://github.com/WebAssembly/meetings/blob/297ac8b5ac00e6be1fe33b1f4a146cc7481b631d/stack/2024/stack-2024-01-29.md" target="_blank" rel="noopener noreferrer">投票</a> 修改 JSPI 的 API。具体来说，原先的 <code>Suspender</code> 对象不再需要，我们将使用 JavaScript/WebAssembly 边界作为确定暂停计算的界限。</p><p>这一变化虽小，但可能影响重大：在需要暂停计算时，最近一次调用封装的 WebAssembly 导出函数将决定暂停点的“切点”。</p><p>对于 JSPI 的使用者而言，这意味着对暂停点的控制有所减少。但另一方面，API 不再需要显式管理 <code>Suspender</code> 对象，使得使用变得更加简单。</p><h3 id="不再需要-webassembly-function" tabindex="-1"><a class="header-anchor" href="#不再需要-webassembly-function"><span>不再需要 <code>WebAssembly.Function</code></span></a></h3><p>另一个变化是 API 的风格不再依赖 <code>WebAssembly.Function</code> 构造函数，而是提供了特定的函数和构造器。</p><p>这种变化带来了以下几个好处：</p><ul><li>移除了对 <a href="https://github.com/WebAssembly/js-types" target="_blank" rel="noopener noreferrer"><em>Type Reflection</em> 提案</a> 的依赖。</li><li>简化了 JSPI 的工具链：新 API 函数不再需要明确引用 WebAssembly 函数的类型。</li></ul><p>这一变化得以实现，是因为 API 中不再显式引用 <code>Suspender</code> 对象。</p><h3 id="返回时不再暂停" tabindex="-1"><a class="header-anchor" href="#返回时不再暂停"><span>返回时不再暂停</span></a></h3><p>第三个变化涉及暂停调用的行为。与之前的 API 不同，新 API 只有在 JavaScript 函数实际返回 <code>Promise</code> 时才会暂停。</p><p>尽管这看似违反了 <a href="https://www.w3.org/2001/tag/doc/promises-guide#accepting-promises" target="_blank" rel="noopener noreferrer">W3C TAG 的建议</a>，但对于 JSPI 用户来说，这是一种安全的优化。因为 JSPI 实际上承担了调用返回 <code>Promise</code> 的函数的角色。</p><p>这一变化对大多数应用程序影响不大，但某些应用程序将因避免不必要的浏览器事件循环往返而显著受益。</p><h3 id="新-api" tabindex="-1"><a class="header-anchor" href="#新-api"><span>新 API</span></a></h3><p>新 API 非常简单：有一个函数接受从 WebAssembly 模块导出的函数，并将其转换为返回 <code>Promise</code> 的函数：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Function</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Webassembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">promising</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Function</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> wsFun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意，尽管参数被类型化为 JavaScript <code>Function</code>，但实际上仅限于 WebAssembly 函数。</p><p>在暂停调用方面，有一个新的类 <code>WebAssembly.Suspending</code>，并且有一个构造函数接受一个 JavaScript 函数作为参数。在 WebIDL 中，它被表示为：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Suspending</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Function</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，这个 API 具有不对称性：我们有一个函数接受一个 WebAssembly 函数并返回一个新的 promise 函数；而在标记暂停函数时，则将其封装在 <code>Suspending</code> 对象中。这反映了底层实现的深层次差异。</p><p>导入函数的暂停行为本质上是调用的一部分：也就是说，某个实例化模块内的函数调用导入并因此暂停。</p><p>另一方面，<code>promising</code> 函数接受一个常规的 WebAssembly 函数，并返回一个新的函数，该函数可以响应暂停并返回一个 <code>Promise</code>。</p><h3 id="使用新-api" tabindex="-1"><a class="header-anchor" href="#使用新-api"><span>使用新 API</span></a></h3><p>如果您是 Emscripten 用户，使用新 API 通常不需要更改代码。您需要使用至少版本为 3.1.61 的 Emscripten，并且浏览器版本至少为 Chrome 126.0.6478.17（Chrome M126）。</p><p>如果您是自行集成 JSPI，那么您的代码应该会大大简化。特别是，不再需要存储传入的 <code>Suspender</code> 对象并在调用导入时检索它。您可以在 WebAssembly 模块中使用常规的顺序代码。</p><h3 id="旧-api" tabindex="-1"><a class="header-anchor" href="#旧-api"><span>旧 API</span></a></h3><p>旧的 API 将至少运行至 2024 年 10 月 29 日（Chrome M128）。之后，我们计划移除旧的 API。</p><p>需要注意的是，Emscripten 本身从 3.1.61 版本开始将不再支持旧的 API。</p><h3 id="如何检测您浏览器中的-api" tabindex="-1"><a class="header-anchor" href="#如何检测您浏览器中的-api"><span>如何检测您浏览器中的 API</span></a></h3><p>更换 API 是一个需要谨慎对待的过程。我们之所以能够在此情况下进行更改，是因为 JSPI 本身仍处于试验阶段。您可以通过以下简单方法来测试您的浏览器启用了哪个 API：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> oldAPI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Suspender</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">undefined</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newAPI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> WebAssembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Suspending</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">undefined</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果浏览器启用了旧的 JSPI API，<code>oldAPI</code> 函数将返回 <code>true</code>；如果启用了新的 JSPI API，<code>newAPI</code> 函数将返回 <code>true</code>。</p><h2 id="jspi-的发展趋势" tabindex="-1"><a class="header-anchor" href="#jspi-的发展趋势"><span>JSPI 的发展趋势</span></a></h2><h3 id="实现方面" tabindex="-1"><a class="header-anchor" href="#实现方面"><span>实现方面</span></a></h3><p>我们正在开发的 JSPI 最大的变化实际上对大多数程序员来说是不可见的：即所谓的可增长堆栈。</p><p>目前的 JSPI 实现是基于分配固定大小的堆栈的。实际上，分配的堆栈相当大。这是因为我们必须能够处理可能需要深度堆栈来正确处理递归的任意 WebAssembly 计算。</p><p>然而，这并不是一个可持续的策略：我们希望支持拥有数百万个暂停协程的应用程序；如果每个堆栈大小为 1MB，这是不可能实现的。</p><p>可增长堆栈是一种堆栈分配策略，允许 WebAssembly 堆栈根据需要增长。通过这种方式，我们可以为只需要较小堆栈空间的应用程序分配非常小的堆栈，并在应用程序空间不足时（即堆栈溢出）扩展堆栈。</p><p>有几种潜在的实现可增长堆栈的技术。我们正在研究的一种方法是分段堆栈。分段堆栈由一系列堆栈区域组成——每个区域都有固定大小，但不同的段可能具有不同的大小。</p><p>需要注意的是，尽管我们可能正在解决协程的堆栈溢出问题，但我们并不打算使主堆栈或中央堆栈可增长。因此，如果您的应用程序出现堆栈空间不足问题，除非使用 JSPI，否则可增长堆栈无法解决问题。</p><h3 id="标准化过程" tabindex="-1"><a class="header-anchor" href="#标准化过程"><span>标准化过程</span></a></h3><p>截至发布时，JSPI 正在进行 <a href="https://v8.dev/blog/jspi-ot" target="_blank" rel="noopener noreferrer">Origin Trial</a>。新 API 将在剩余的 Origin Trial 期间上线——即在 Chrome M126 中。</p><p>在 Origin Trial 期间，旧的 API 也将继续可用；然而，计划在 Chrome M128 后不久停止支持。</p><p>之后，JSPI 的主要工作重心将是标准化过程。JSPI 目前（截至发布时）处于 W3C Wasm CG 过程的第 3 阶段。下一步，即进入第 4 阶段，将标志着 JSPI 作为 JavaScript 和 WebAssembly 生态系统的标准 API 被正式采纳。</p>`,49),l=[t];function r(p,h){return i(),s("div",null,l)}const o=e(n,[["render",r],["__file","WebAssembly新JSPI.html.vue"]]),c=JSON.parse('{"path":"/webkit/v8/WebAssembly%E6%96%B0JSPI.html","title":"WebAssembly JSPI 新 API","lang":"zh-CN","frontmatter":{"title":"WebAssembly JSPI 新 API","date":"2024-06-04T00:00:00.000Z","category":"webkit","tags":["WebAssembly"],"description":"WebAssembly 的 JavaScript Promise Integration (JSPI) API 迎来了新的更新，已在 Chrome M126 版本中上线。本文将讨论此次更新的内容、如何在 Emscripten 中使用该 API 以及 JSPI 的未来发展路线。 JSPI 是一个 API，允许使用顺序API 的 WebAssembly 应...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/webkit/v8/WebAssembly%E6%96%B0JSPI.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"WebAssembly JSPI 新 API"}],["meta",{"property":"og:description","content":"WebAssembly 的 JavaScript Promise Integration (JSPI) API 迎来了新的更新，已在 Chrome M126 版本中上线。本文将讨论此次更新的内容、如何在 Emscripten 中使用该 API 以及 JSPI 的未来发展路线。 JSPI 是一个 API，允许使用顺序API 的 WebAssembly 应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T07:14:05.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"WebAssembly"}],["meta",{"property":"article:published_time","content":"2024-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T07:14:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebAssembly JSPI 新 API\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T07:14:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"更新了什么？","slug":"更新了什么","link":"#更新了什么","children":[{"level":3,"title":"Suspender 对象的终结","slug":"suspender-对象的终结","link":"#suspender-对象的终结","children":[]},{"level":3,"title":"不再需要 WebAssembly.Function","slug":"不再需要-webassembly-function","link":"#不再需要-webassembly-function","children":[]},{"level":3,"title":"返回时不再暂停","slug":"返回时不再暂停","link":"#返回时不再暂停","children":[]},{"level":3,"title":"新 API","slug":"新-api","link":"#新-api","children":[]},{"level":3,"title":"使用新 API","slug":"使用新-api","link":"#使用新-api","children":[]},{"level":3,"title":"旧 API","slug":"旧-api","link":"#旧-api","children":[]},{"level":3,"title":"如何检测您浏览器中的 API","slug":"如何检测您浏览器中的-api","link":"#如何检测您浏览器中的-api","children":[]}]},{"level":2,"title":"JSPI 的发展趋势","slug":"jspi-的发展趋势","link":"#jspi-的发展趋势","children":[{"level":3,"title":"实现方面","slug":"实现方面","link":"#实现方面","children":[]},{"level":3,"title":"标准化过程","slug":"标准化过程","link":"#标准化过程","children":[]}]}],"git":{"createdTime":1724483645000,"updatedTime":1724483645000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":1}]},"readingTime":{"minutes":5.86,"words":1758},"filePathRelative":"webkit/v8/WebAssembly新JSPI.md","localizedDate":"2024年6月4日","excerpt":"<p>WebAssembly 的 JavaScript Promise Integration (JSPI) API 迎来了新的更新，已在 Chrome M126 版本中上线。本文将讨论此次更新的内容、如何在 Emscripten 中使用该 API 以及 JSPI 的未来发展路线。</p>\\n<p>JSPI 是一个 API，允许使用<strong>顺序</strong>API 的 WebAssembly 应用程序访问<strong>异步</strong>的 Web API。许多 Web API 是通过 JavaScript <code>Promise</code> 对象实现的：这些 API 在执行操作时并不会立即完成，而是返回一个 <code>Promise</code> 来表示操作的完成。而许多编译成 WebAssembly 的应用程序则来自 C/C++ 领域，后者通常使用的是会阻塞调用者直到完成的 API。</p>","autoDesc":true}');export{o as comp,c as data};
