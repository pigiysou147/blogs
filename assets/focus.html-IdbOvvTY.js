import{_ as e,c as a,o as t,b as i}from"./app-BvxU_3ZH.js";const o={},s=i(`<h1 id="专注" tabindex="-1"><a class="header-anchor" href="#专注"><span>专注</span></a></h1><p>默认情况下，互动元素（包括<a href="/blogs/web/html/forms">表单控件</a>、<a href="/blogs/web/html/links">链接</a>和按钮）可聚焦和按 Tab 键。可 Tab 键的元素是文档依序焦点导航顺序的一部分。其他元素为非活跃元素，这意味着它们不具有互动性。使用 HTML 属性，可以使交互元素具有互动性，也可以使 inert 元素具有互动性。</p><p>**注意 ** ：出于易用性方面的原因，请始终确保用户知道哪个元素具有焦点。添加 CSS <a href="https://developer.mozilla.org/docs/Web/CSS/:focus" target="_blank" rel="noopener noreferrer"><code>:focus</code></a>、<a href="https://developer.mozilla.org/docs/Web/CSS/:focus-visible" target="_blank" rel="noopener noreferrer"><code>:focus-visible</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/:focus-within" target="_blank" rel="noopener noreferrer"><code>:focus-within</code></a> 样式（可选）。这一点非常重要：<a href="/blogs/web/css/focus">CSS</a> 和<a href="/blogs/web/accessibility/focus">无障碍功能</a>学习路线中都有专门介绍焦点样式的“学习”部分。默认情况下，导航焦点顺序与视觉顺序相同，即源代码顺序。有一些 HTML 属性可以改变这种顺序，CSS 属性可以改变内容的视觉顺序。使用 HTML 更改 Tab 键顺序，或使用 CSS 更改可视呈现顺序可能会影响用户体验。</p><p>不要使用 CSS 和 HTML 改变感知的和实际的 Tab 键顺序顺序。如以下两个示例所示，标签页顺序与视觉预期顺序不一致，会让用户感到困惑，而且不利于用户体验。</p><p>在此示例中，<a href="https://developer.mozilla.org/docs/Web/HTML/Global_attributes/tabindex" target="_blank" rel="noopener noreferrer"><code>tabindex</code></a> 属性的值导致了 Tab 键顺序混乱：</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/GRXKqGz?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen GRXKqGz" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>在此示例中，CSS 创建了按 Tab 键顺序与内容显示顺序之间的差异：</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/KKxPMBV?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上提供的 Pen KKxPMBV" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p><a href="https://developer.mozilla.org/docs/Web/CSS/flex-flow" target="_blank" rel="noopener noreferrer"><code>flex-flow: row-reverse;</code></a> 声明颠倒了视觉顺序。此外，CSS <a href="https://developer.mozilla.org/docs/Web/CSS/order" target="_blank" rel="noopener noreferrer">order</a> 属性已应用到第六个字词“This”，从而在视觉上移动了这个字词。按 Tab 键序列是代码的顺序，不再与视觉顺序匹配，导致键盘用户断开连接。</p><p>**注意 ** ：CSS 功能（包括 <a href="https://developer.mozilla.org/docs/Learn/CSS/CSS_layout/Flexbox" target="_blank" rel="noopener noreferrer">flexbox</a>、<a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Grid_Layout" target="_blank" rel="noopener noreferrer">grid</a>、<a href="https://developer.mozilla.org/docs/Learn/CSS/CSS_layout/Positioning" target="_blank" rel="noopener noreferrer">定位</a>、<a href="https://developer.mozilla.org/docs/Web/CSS/translate" target="_blank" rel="noopener noreferrer">transforms</a>和<a href="https://developer.mozilla.org/docs/Learn/CSS/CSS_layout/Multiple-column_Layout" target="_blank" rel="noopener noreferrer">多列</a>）可能会改变内容的视觉顺序。请始终确保您的内容在所有视口尺寸上都保持逻辑 Tab 键顺序。使用键盘按 Tab 键浏览内容，即可测试内容：按 Shift + Tab 键可在内容中后退。请始终确保使用 CSS 可以清楚地确定哪个元素当前具有焦点，并使用 CSS 不要对可聚焦元素重新排序，从而避免出现无障碍功能问题。## 使 inert 元素具有互动性</p><p><code>contenteditable</code> 和 <code>tabindex</code> 属性属于全局属性，可添加到任何元素中，使其在进程中可聚焦。还可以使用鼠标或指针聚焦可聚焦的元素，方法是设置 <a href="https://developer.mozilla.org/docs/Web/HTML/Global_attributes/autofocus" target="_blank" rel="noopener noreferrer"><code>autofocus</code></a> 属性，或者通过脚本（例如使用 <a href="https://developer.mozilla.org/docs/Web/API/HTMLElement/focus" target="_blank" rel="noopener noreferrer"><code>element.focus()</code></a>）进行聚焦。</p><h3 id="tabindex-属性" tabindex="-1"><a class="header-anchor" href="#tabindex-属性"><span><code>tabindex</code> <strong>属性</strong></span></a></h3><p><a href="/blogs/web/html/attributes#tabindex">属性</a>中引入的全局 <a href="https://developer.mozilla.org/docs/Web/HTML/Global_attributes/tabindex" target="_blank" rel="noopener noreferrer"><code>tabindex</code></a> 属性可让原本无法获得焦点的元素获得焦点，这些元素通常使用 Tab 键，因此得名。</p><p><code>tabindex</code> 属性接受整数值。负值可使元素可聚焦，但不能设为 Tab 键。如果 <code>tabindex</code> 值为 <code>0</code>，则可将该元素设置为可聚焦和以 Tab 键形式显示，从而将应用了该元素的元素按源代码顺序添加到依序焦点导航顺序。如果值为 1 或更大值，则相应元素可聚焦并可按 Tab 键，但会将其添加到优先按 Tab 键序列序列中，因此，如上文所述，应避免使用它。</p><p>在本页面中，分享按钮 <code>&lt;share-action&gt;</code> 是一个<a href="/blogs/web/html/template">自定义元素</a>。<code>tabindex=&quot;0&quot;</code> 会将这个通常无法聚焦的元素添加到键盘的默认 Tab 键顺序中：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">share-action</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> authors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@front-end.social/@estellevw&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;click&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-category</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;web.dev&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-icon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;share&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-label</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;share, mastodon&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> role</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;button&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> tabindex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">svg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> aria-label</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;share&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> role</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> xmlns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://www.w3.org/2000/svg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">use</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#shareIcon&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">svg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Share&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">share-action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意 ** ：<a href="https://developer.mozilla.org/docs/Web/Accessibility/ARIA/Roles/button_role" target="_blank" rel="noopener noreferrer"><code>role=&quot;button&quot;</code></a> 会告知屏幕阅读器用户此元素的行为方式应与 <a href="https://developer.mozilla.org/docs/Web/HTML/Element/button" target="_blank" rel="noopener noreferrer"><code>&lt;button&gt;</code></a> 类似。创建模仿现有语义元素（包括 <a href="https://developer.mozilla.org/docs/Web/Accessibility/ARIA/Roles" target="_blank" rel="noopener noreferrer">ARIA 角色</a>）的自定义元素是适当且符合预期的。该元素必须提供要复制的元素的所有功能。为此，可以扩展复制的元素（例如扩展 <a href="https://developer.mozilla.org/docs/Web/API/HTMLButtonElement" target="_blank" rel="noopener noreferrer"><code>HTMLButtonElement</code></a>），或添加 <code>tabindex=&quot;0&quot;</code> 并使用 JavaScript 对所模仿的元素的所有功能进行编程，包括处理指针事件以及按 Enter 键和空格键的按键操作。如果按钮使用的是 <code>&lt;button&gt;</code>（而不是创建自定义元素），那么 <code>tabindex</code> 和 <code>role</code> 属性就没必要，浏览器会提供指针和键盘事件。此页面上还有另一个自定义元素：<a href="/blogs/web/html/navigation#local_navigation">本地导航</a>有一个自定义元素为负的 <code>tabindex</code> 值：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">web-navigation-drawer</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;standard&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> tabindex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果 <code>tabindex</code> 属性为负值，则该元素可聚焦，但不能按 Tab 键切换。该元素能够接收焦点（例如通过 <a href="https://developer.mozilla.org/docs/Web/API/HTMLElement/focus" target="_blank" rel="noopener noreferrer"><code>HTMLElement.focus()</code></a>），但它不属于依序焦点导航顺序的一部分。不可标签页且可聚焦元素的惯例是使用 <code>tabindex=&quot;-1&quot;</code>。请注意，如果您向互动元素添加 <code>tabindex=&quot;-1&quot;</code>，它将无法再按 Tab 键。</p><p><a href="https://developer.mozilla.org/docs/Web/API/HTMLElement/focus" target="_blank" rel="noopener noreferrer"><code>element.focus()</code></a> 方法可用于将焦点设置为可聚焦元素。请注意，浏览器会将聚焦的元素滚动到视图中。因此，请避免使用 <code>element.focus({preventScroll:true})</code>，因为专注于不可见的元素会导致糟糕的用户体验。</p><p>如果要查询文档以找出当前获得焦点的元素，请使用只读 <a href="https://developer.mozilla.org/docs/Web/API/Document/activeElement" target="_blank" rel="noopener noreferrer"><code>Document.activeElement</code></a> 属性。</p><p><code>tabindex</code> 为 <code>1</code> 或更高的元素会包含在单独的制表符序列中。正如您在 Codepen 中所看到的，按 Tab 键将按单独的序列开始（按值从低到高的顺序），然后再按源顺序（无 <code>tabindex</code> 设置或 <code>tabindex=&quot;0&quot;</code>）进行常规序列：</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/WNgexPv?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen WNgexPv" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>值为正的 <code>tabindex</code> 会将元素置于优先的焦点序列中，这可能会导致焦点顺序混乱。避免使用 <code>tabindex</code> 修改 DOM 顺序。更改 Tab 键顺序不仅会造成糟糕的用户体验，而且开发者很难管理和维护。</p><h3 id="contenteditable-属性" tabindex="-1"><a class="header-anchor" href="#contenteditable-属性"><span><code>contenteditable</code> <strong>属性</strong></span></a></h3><p>我们之前讨论了 <a href="/blogs/web/html/attributes#contenteditable"><code>contenteditable</code></a> 属性。在任何元素上设置 <code>contenteditable=&quot;true&quot;</code> 都会使其可修改、可聚焦，并将成为标签页顺序的一部分。焦点行为与设置 <code>tabindex=&quot;0&quot;</code> 类似，但并不相同。嵌套的 <code>contenteditable</code> 元素可聚焦，但不能按 Tab 键操作。如需使嵌套的 <code>contenteditable</code> 元素可标签页，请添加 <code>tabindex=&quot;0&quot;</code>，这会将其添加到焦点顺序导航顺序中。</p><h2 id="让互动元素成为焦点" tabindex="-1"><a class="header-anchor" href="#让互动元素成为焦点"><span>让互动元素成为焦点</span></a></h2><h3 id="autofocus-属性" tabindex="-1"><a class="header-anchor" href="#autofocus-属性"><span><code>autofocus</code> <strong>属性</strong></span></a></h3><p>虽然布尔值 <a href="https://developer.mozilla.org/docs/Web/HTML/Global_attributes/autofocus" target="_blank" rel="noopener noreferrer"><code>autofocus</code></a> 是可以对任何元素设置的全局属性，但它并不能使 inert 元素具有互动性。网页加载时，设置了 <code>autofocus</code> 属性的第一个可聚焦元素就会获得焦点，前提是该元素已显示且未嵌套在 <a href="/blogs/web/html/dialog"><code>&lt;dialog&gt;</code></a> 中。</p><p>自动将焦点置于内容上可能会让人感到困惑。对表单控件设置 <code>autofocus</code> 意味着表单控件会在网页加载时滚动到用户视野范围内。所有用户（包括屏幕阅读器用户和使用小视口的用户）可能看不到表单说明，甚至可能滚动过表单控件正常可见的标签。<code>autofocus</code> 属性不会更改文档的顺序焦点导航顺序。系统会跳过自动聚焦元素之前的序列中的元素。因此，不建议添加 <code>autofocus</code> 属性。</p><p>“不使用 <code>autofocus</code>”建议的例外情况是，在 <code>&lt;dialog&gt;</code> 元素中添加 <code>autofocus</code> 属性。打开对话框后，浏览器将自动聚焦在 <code>&lt;dialog&gt;</code> 内的第一个可聚焦互动元素上，这意味着无需对某个元素执行 <code>autofocus</code> 操作。如果希望确保对话框中的特定互动元素在对话框打开时获得焦点，请为该元素添加 <code>autofocus</code> 属性。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dialog</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">form</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dialog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;submit&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> autofocus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;close&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">form</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为关闭 <code>&lt;button&gt;</code> 设置的 <code>autofocus</code> 属性可确保在对话框打开时它获得焦点。作为对话框中的第一个元素，它在任何情况下都会获得焦点。默认情况下，当对话框打开时，对话框中的第一个可聚焦元素将获得焦点，除非对话框中的其他元素设置了 <code>autofocus</code> 属性。</p><h2 id="将交互元素设置为非活动状态" tabindex="-1"><a class="header-anchor" href="#将交互元素设置为非活动状态"><span>将交互元素设置为非活动状态</span></a></h2><p>还有一些 HTML 属性可用来从 Tab 键操作序列中移除互动元素。为可聚焦元素添加负 <code>tabindex</code>、为支持表单控件添加 <code>disabled</code> 属性，以及向容器添加全局 <code>inert</code> 属性，都会使元素不可按 Tab 键。这三个属性不可互换。</p><h3 id="负-tabindex-值" tabindex="-1"><a class="header-anchor" href="#负-tabindex-值"><span>负 <code>tabindex</code> <strong>值</strong></span></a></h3><p>如前所述，如果 <code>tabindex</code> 属性为负值，某个元素可聚焦却不可按 Tab 键。将 <code>tabindex=&quot;0&quot;</code> 添加到默认可聚焦的元素（包括链接、按钮、表单控件和 <code>contenteditable</code> 元素）中，则没有必要添加；加入值为负的 <code>tabindex</code> 时，系统会从聚焦导航顺序中移除正常可按 Tab 键的元素。</p><p>负 <code>tabindex</code> 值可防止键盘用户专注于互动元素，但不会停用该元素。指针用户仍然可以将焦点放在该元素上。如需停用某个元素，请使用 <code>disabled</code> 属性。</p><h3 id="已停用" tabindex="-1"><a class="header-anchor" href="#已停用"><span>已停用</span></a></h3><p>布尔值 <a href="https://developer.mozilla.org/docs/Web/HTML/Attributes/disabled" target="_blank" rel="noopener noreferrer">disabled</a> 属性会使应用它的表单控件及其后代（如果有）无法聚焦。已停用的表单控件无法获得焦点，不能获取点击事件，也不能在提交表单时提交。请注意，<code>disabled</code> 不是全局属性。它适用于 <code>&lt;button&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;optgroup&gt;</code>、<code>&lt;option&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、与表单关联的自定义元素以及 <a href="https://developer.mozilla.org/docs/Web/HTML/Element/fieldset" target="_blank" rel="noopener noreferrer"><code>&lt;fieldset&gt;</code></a>。在 <code>&lt;optgroup&gt;</code> 或 <code>&lt;fieldset&gt;</code> 上设置后，所有子表单控件都会停用，但 <code>&lt;fieldset&gt;</code> 的第一个 <a href="https://developer.mozilla.org/docs/Web/HTML/Element/legend" target="_blank" rel="noopener noreferrer"><code>&lt;legend&gt;</code></a> 的内容除外。</p><p>您也可以使用 <a href="https://developer.mozilla.org/docs/Web/CSS/:disabled" target="_blank" rel="noopener noreferrer"><code>:disabled</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/:enabled" target="_blank" rel="noopener noreferrer"><code>:enabled</code></a> 伪类来定位那些支持 <code>disabled</code> 的元素。即使设置了 <a href="https://developer.mozilla.org/docs/Web/CSS/accent-color" target="_blank" rel="noopener noreferrer"><code>accent-color</code></a>，通过 <code>disabled</code> 属性停用的元素通常也会通过用户代理样式表设置为浅灰色。</p><p>作为布尔值属性，该属性的存在会停用原本已启用的元素；您无法将其设置为 <code>false</code>。如需重新启用已停用的元素，必须移除该属性（通常通过 <a href="https://developer.mozilla.org/docs/Web/API/Element/removeAttribute" target="_blank" rel="noopener noreferrer"><code>Element.removeAttribute(&#39;disabled&#39;)</code></a> 移除）。</p><p>利用 <a href="https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled" target="_blank" rel="noopener noreferrer"><code>HTMLInputElement.disabled</code></a> 属性，您可以检查输入是否已停用。由于 <code>disabled</code> 不是全局属性，因此它并非从 HTMLElement 继承，但每个支持元素接口（如 <a href="https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled" target="_blank" rel="noopener noreferrer"><code>HTMLSelectElement</code></a>、<a href="https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement#instance_properties" target="_blank" rel="noopener noreferrer"><code>HTMLTextareaElement</code></a>）都具有相同的只读属性。</p><p><code>disabled</code> 属性不适用于通常可通过 <code>tabindex</code> 或 <code>contenteditable</code> 设置为可聚焦的 <code>inert</code> 元素。此外，它不适用于 <code>&lt;form&gt;</code> 元素本身。如需停用这些属性，可以使用全局 <code>inert</code> 属性。</p><h3 id="inert-属性" tabindex="-1"><a class="header-anchor" href="#inert-属性"><span><code>inert</code> <strong>属性</strong></span></a></h3><p>向某个元素添加 <code>inert</code> 全局布尔值属性后，该元素和所有嵌套内容（既不可点击，也不能按 Tab 键操作）会被停用，并且会从无障碍功能树中移除。虽然 <code>inert</code> 可应用于任何元素，但通常用于内容版块，例如屏幕外或其他隐藏内容。</p><p>将 <code>disabled</code> 应用于表单控件时，浏览器会提供默认样式，并且可以使用 <a href="https://developer.mozilla.org/docs/Web/CSS/:disabled" target="_blank" rel="noopener noreferrer"><code>:disabled</code></a> 伪类来设置样式。<code>inert</code> 属性不提供视觉指示符，也没有匹配的伪类（尽管 <code>[inert]</code> <a href="/blogs/web/css/selectors#attribute_selector">属性选择器</a>一致）。</p><p>对可见内容使用 <code>inert</code> 而不用样式指示闲置性，这可能会导致用户体验不佳。由于 inert 内容无法供屏幕阅读器用户获取，因此当视力正常的屏幕阅读器用户在屏幕上看到无障碍工具无法获取的内容时，可能会导致混淆。通过 CSS 使惯性变得非常明显。</p><p>确保焦点绝不会移至不可见的内容。对于呈现在屏幕之外且在获得焦点时不会自动进入用户视野的任何内容，应设置为“惯性”。如果内容处于隐藏状态，但在聚焦时进入用户视野范围内（例如本页上的<a href="/blogs/web/html/navigation#skip_to_content_link">“跳至内容”链接</a>），则无需将其设为过时。</p>`,49),r=[s];function l(n,d){return t(),a("div",null,r)}const p=e(o,[["render",l],["__file","focus.html.vue"]]),c=JSON.parse('{"path":"/web/html/focus.html","title":"专注","lang":"zh-CN","frontmatter":{"date":"2024-03-31T00:00:00.000Z","category":"html","description":"专注 默认情况下，互动元素（包括表单控件、链接和按钮）可聚焦和按 Tab 键。可 Tab 键的元素是文档依序焦点导航顺序的一部分。其他元素为非活跃元素，这意味着它们不具有互动性。使用 HTML 属性，可以使交互元素具有互动性，也可以使 inert 元素具有互动性。 **注意 ** ：出于易用性方面的原因，请始终确保用户知道哪个元素具有焦点。添加 CSS...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/html/focus.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"专注"}],["meta",{"property":"og:description","content":"专注 默认情况下，互动元素（包括表单控件、链接和按钮）可聚焦和按 Tab 键。可 Tab 键的元素是文档依序焦点导航顺序的一部分。其他元素为非活跃元素，这意味着它们不具有互动性。使用 HTML 属性，可以使交互元素具有互动性，也可以使 inert 元素具有互动性。 **注意 ** ：出于易用性方面的原因，请始终确保用户知道哪个元素具有焦点。添加 CSS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T10:18:51.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:published_time","content":"2024-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T10:18:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"专注\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T10:18:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":3,"title":"tabindex 属性","slug":"tabindex-属性","link":"#tabindex-属性","children":[]},{"level":3,"title":"contenteditable 属性","slug":"contenteditable-属性","link":"#contenteditable-属性","children":[]},{"level":2,"title":"让互动元素成为焦点","slug":"让互动元素成为焦点","link":"#让互动元素成为焦点","children":[{"level":3,"title":"autofocus 属性","slug":"autofocus-属性","link":"#autofocus-属性","children":[]}]},{"level":2,"title":"将交互元素设置为非活动状态","slug":"将交互元素设置为非活动状态","link":"#将交互元素设置为非活动状态","children":[{"level":3,"title":"负 tabindex 值","slug":"负-tabindex-值","link":"#负-tabindex-值","children":[]},{"level":3,"title":"已停用","slug":"已停用","link":"#已停用","children":[]},{"level":3,"title":"inert 属性","slug":"inert-属性","link":"#inert-属性","children":[]}]}],"git":{"createdTime":1724483645000,"updatedTime":1724494731000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":2}]},"readingTime":{"minutes":11.29,"words":3386},"filePathRelative":"web/html/focus.md","localizedDate":"2024年3月31日","excerpt":"\\n<p>默认情况下，互动元素（包括<a href=\\"/blogs/web/html/forms\\">表单控件</a>、<a href=\\"/blogs/web/html/links\\">链接</a>和按钮）可聚焦和按 Tab 键。可 Tab 键的元素是文档依序焦点导航顺序的一部分。其他元素为非活跃元素，这意味着它们不具有互动性。使用 HTML 属性，可以使交互元素具有互动性，也可以使 inert 元素具有互动性。</p>\\n<p>**注意 ** ：出于易用性方面的原因，请始终确保用户知道哪个元素具有焦点。添加 CSS <a href=\\"https://developer.mozilla.org/docs/Web/CSS/:focus\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>:focus</code></a>、<a href=\\"https://developer.mozilla.org/docs/Web/CSS/:focus-visible\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>:focus-visible</code></a> 和 <a href=\\"https://developer.mozilla.org/docs/Web/CSS/:focus-within\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>:focus-within</code></a> 样式（可选）。这一点非常重要：<a href=\\"/blogs/web/css/focus\\">CSS</a> 和<a href=\\"/blogs/web/accessibility/focus\\">无障碍功能</a>学习路线中都有专门介绍焦点样式的“学习”部分。默认情况下，导航焦点顺序与视觉顺序相同，即源代码顺序。有一些 HTML 属性可以改变这种顺序，CSS 属性可以改变内容的视觉顺序。使用 HTML 更改 Tab 键顺序，或使用 CSS 更改可视呈现顺序可能会影响用户体验。</p>","autoDesc":true}');export{p as comp,c as data};
