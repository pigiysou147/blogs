import{_ as a,c as n,d as i,b as s,a as e,o as l}from"./app-jraesLnh.js";const t="/blogs/assets/a-timeline-showing-css-h-b4ed206a35185-DCN3Q7I0.svg",d="/blogs/assets/a-diagram-showing-the-di-12ce9bdac4132-B4cjMmp9.png",r={},h=s('<h1 id="布局" tabindex="-1"><a class="header-anchor" href="#布局"><span>布局</span></a></h1><p>假设您是一名开发者，一位设计师同事为您提供一个全新网站的设计。该设计具有各种有趣的布局和组合：考虑视口宽度和高度的二维布局，以及需要流动和灵活的布局。如何确定使用 CSS 来设置这些样式的最佳方式？</p><p>CSS 为我们提供了各种方法来解决横轴、纵轴或两者上的布局问题。为上下文选择正确的布局方法可能并非易事，并且通常您可能需要多种布局方法才能解决问题。为帮助完成这项工作，在接下来的模块中，您将了解每种 CSS 布局机制的独特功能，并据此做出明智的决策。</p><h2 id="布局-简述" tabindex="-1"><a class="header-anchor" href="#布局-简述"><span>布局：简述</span></a></h2><p>在 Web 发展初期，使用 `` 元素进行布局的设计会比简单的文档更加复杂。当 CSS 在 90 年代后期浏览器得到广泛采用后，您就可以更轻松地将 HTML 与视觉样式分离开来。 CSS 让开发者能够在不接触 HTML 的情况下完全改变网站的外观和风格。 这项新功能激发了 <a href="http://www.csszengarden.com/" target="_blank" rel="noopener noreferrer">The CSS Zen Garden</a> 等项目的灵感，该项目旨在展示 CSS 的强大功能，鼓励更多开发者学习 CSS。</p><p>随着我们对网页设计和浏览器技术的需求不断演变，CSS 也在不断发展。 您可以阅读 <a href="https://24ways.org/2019/a-history-of-css-through-15-years-of-24-ways/" target="_blank" rel="noopener noreferrer">Rachel Andrew 撰写的这篇文章</a>，了解 CSS 布局以及我们的布局方法是如何不断改进的。</p><figure><img src="'+t+'" alt="展示 CSS 这些年的发展历程（从 1996 年到 2021 年）的时间轴" tabindex="0" loading="lazy"><figcaption>展示 CSS 这些年的发展历程（从 1996 年到 2021 年）的时间轴</figcaption></figure><h2 id="布局-现在和未来" tabindex="-1"><a class="header-anchor" href="#布局-现在和未来"><span>布局：现在和未来</span></a></h2><p>现代 CSS 拥有极其强大的布局工具。 我们有专门的布局系统，在深入探讨 Flexbox 和 Grid 的后续模块之前，先大致了解我们可以使用哪些布局。</p><h2 id="了解-display-属性" tabindex="-1"><a class="header-anchor" href="#了解-display-属性"><span>了解 <code>display</code> 属性</span></a></h2><p><code>display</code> 属性会执行两项操作。它首先确定应用它所应用的框是 inline 还是块。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">inline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内嵌元素的行为类似于句子中的字词。它们在内嵌方向上并排显示。 <code>和</code> 等元素通常用于为所含元素（如 `` [段落]）中的文本段设置样式，它们默认采用内嵌样式。它们还会保留周围的空白。</p><figure><img src="'+d+`" alt="一张示意图，显示了所有不同尺寸的方框以及每个尺寸部分的开始和结束位置" tabindex="0" loading="lazy"><figcaption>一张示意图，显示了所有不同尺寸的方框以及每个尺寸部分的开始和结束位置</figcaption></figure><p>您无法为内嵌元素设置明确的宽度和高度。周围的元素会忽略任何块级的外边距和内边距。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块元素不会并排放置。 他们会自行另起一行。除非被其他 CSS 代码更改，否则块元素将展开为内嵌尺寸，因此在水平书写模式下会跨越整个宽度。将采用 block 元素所有侧边的外边距。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>display</code> 属性还决定了元素的子元素的行为方式。例如，将 <code>display</code> 属性设置为 <code>display: flex</code> 会使该框成为块级框，并将其子项转换为弹性项。这会启用用于控制对齐、排序和流动的灵活属性。</p><h2 id="flexbox-和网格" tabindex="-1"><a class="header-anchor" href="#flexbox-和网格"><span>Flexbox 和网格</span></a></h2><p>为多个元素创建布局规则的主要布局机制是 <em><a href="/blogs/web/css/flexbox">flexbox</a></em> 和 <em><a href="/blogs/web/css/grid">grid</a></em>。它们虽然有相似之处，但旨在解决不同的布局问题。</p><p><strong>注意</strong> ：我们将在未来的单元中更详细地介绍这两项功能。不过，我们在此简要概述一下两者的用途。</p><h3 id="flexbox" tabindex="-1"><a class="header-anchor" href="#flexbox"><span>Flexbox</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flexbox 是一维布局的布局机制。沿单轴布局（水平或垂直）。 默认情况下，Flexbox 将在内嵌方向上彼此相邻地对齐元素的子元素，并在块方向上拉伸这些子元素，使它们的高度相同。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/rNjxmor?height=300&amp;theme-id=light&amp;default-tab=css%2Cresult&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="来自 Codepen 上的 web-dot-dev 的 Pen rNjxmor" style="color-scheme:initial;box-sizing:inherit;border:0px;height:300px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe>`,26),p=e("iframe",{allow:"camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;",loading:"lazy",src:"https://codepen.io/web-dot-dev/embed/jOyWLmg?height=500&theme-id=light&default-tab=result&editable=true","data-darkreader-inline-border-top":"","data-darkreader-inline-border-right":"","data-darkreader-inline-border-bottom":"","data-darkreader-inline-border-left":"","data-title":"来自 Codepen 上的 web-dot-dev 的 Pen jOyWLmg",style:{"color-scheme":"initial","box-sizing":"inherit",border:"0px",height:"500px",width:"100%","--darkreader-inline-border-top":"0px","--darkreader-inline-border-right":"0px","--darkreader-inline-border-bottom":"0px","--darkreader-inline-border-left":"0px"}},null,-1),k=s(`<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flex: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flex</code> 属性是 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 的简写形式。您可以按如下方式扩展上面的示例：</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flex-grow: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flex-shrink: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flex-basis: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发者提供这些低级规则，可以提示浏览器在受到内容和视口尺寸挑战时布局应表现出怎样的行为。这使得它成为响应性网页设计非常有用的机制。</p><h3 id="网格" tabindex="-1"><a class="header-anchor" href="#网格"><span>网格</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">grid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网格在很多方面与 <strong>Flexbox</strong> 类似，但其设计是为了控制多轴布局，而不是单轴布局（垂直或水平空间）。</p><p>借助网格，您可以针对具有 <code>display: grid</code> 的元素编写布局规则，并引入了一些用于布局样式的新基元，例如 <code>repeat()</code> 和 <code>minmax()</code> 函数。一种实用的网格单元是 <code>fr</code> 单元（剩余空间的一小部分），您可以构建传统的 12 列网格，每个项之间有间隔，并具有 3 个 CSS 属性：</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">grid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    grid-template-columns: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">repeat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">fr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    gap: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/rNjxGVz?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上撰写的 Pen rNjxGVz" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe>`,10),o=s(`<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> :first-child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    grid-row: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    grid-column: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>grid-row</code> 和 <code>grid-column</code> 属性指示网格中的第一个元素从第一列跨越到第四列的起始位置，然后从第一行跨越到第三行。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/YzNwrwB?height=650&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上发布的 Pen YzNwrwB" style="color-scheme:initial;box-sizing:inherit;border:0px;height:650px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe>`,3),c=s(`<p>如果不使用网格或 Flexbox，您的元素会以正常流程显示。在正常流程中，您可以使用多种布局方法来调整项目的行为和位置。</p><h3 id="内嵌块" tabindex="-1"><a class="header-anchor" href="#内嵌块"><span>内嵌块</span></a></h3><p>还记得周围元素如何不遵循内嵌元素的块外边距和内边距吗？借助 <code>inline-block</code>，您可以做到这一点。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">inline-block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>inline-block</code> 会得到一个具备块级元素一些特性的框，但该框仍然内嵌在文本中。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    margin-top: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/PoWZJKw?height=300&amp;theme-id=light&amp;default-tab=css%2Cresult&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="来自 Codepen 上的 web-dot-dev 的 Pen PoWZJKw" style="color-scheme:initial;box-sizing:inherit;border:0px;height:300px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe>`,7),g=s(`<p>如果某张图片包含在一段文本中，那么这段文字会不会很方便，就像您在报纸中看到的那样？您可以使用浮点数执行此操作。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    float: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    margin-right: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>float</code> 属性指示元素“浮动”到指定的方向。此示例中的图像被指示向左浮动，然后同级元素可以“环绕”它。您可以指示某个元素悬浮 <code>left</code>、<code>right</code> 或 <code>inherit</code>。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/VwPaLMg?height=300&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen VwPaLMg" style="color-scheme:initial;box-sizing:inherit;border:0px;height:300px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe>`,4),b=s(`<h3 id="多列布局" tabindex="-1"><a class="header-anchor" href="#多列布局"><span>多列布局</span></a></h3><p>如果您的元素列表非常长，例如全世界所有国家/地区的列表，则可能会导致用户进行<em>大量</em>的滚动操作并浪费时间。它还会导致网页上产生多余的空白。 借助 CSS 多列，您可以将此列拆分为多列，以解决这两个问题。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;All countries&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ul</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;countries&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Argentina&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Aland Islands&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Albania&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Algeria&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;American Samoa&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Andorra&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.countries { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    column-count: 2;   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    column-gap: 1em;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会自动将这个长列表拆分成两列，并在两列之间添加一个间距。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/gOgrpzO?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上发布的 Pen gOgrpzO" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe>`,5),m=e("iframe",{allow:"camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;",loading:"lazy",src:"https://codepen.io/web-dot-dev/embed/jOyqPvB?height=500&theme-id=light&default-tab=result&editable=true","data-darkreader-inline-border-top":"","data-darkreader-inline-border-right":"","data-darkreader-inline-border-bottom":"","data-darkreader-inline-border-left":"","data-title":"由 web-dot-dev 在 Codepen 上开发的 Pen jOyqPvB",style:{"color-scheme":"initial","box-sizing":"inherit",border:"0px",height:"500px",width:"100%","--darkreader-inline-border-top":"0px","--darkreader-inline-border-right":"0px","--darkreader-inline-border-bottom":"0px","--darkreader-inline-border-left":"0px"}},null,-1),B=s(`<h3 id="positioning" tabindex="-1"><a class="header-anchor" href="#positioning"><span>Positioning</span></a></h3><p>关于布局机制概述的最后一个内容是定位。 <code>position</code> 属性可更改元素在文档正常流程中的行为方式，以及元素与其他元素的关系。可用选项包括 <code>relative</code>、<code>absolute</code>、<code>fixed</code> 和 <code>sticky</code>，默认值为 <code>static</code>。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    top: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此元素相对于其自身位置，基于其在文档中的当前位置向下微移 10 像素。将 <code>position: relative</code> 添加到元素也会使其成为包含 <code>position: absolute</code> 的任何子元素的包含块。这意味着，当对其应用了绝对位置时，其子元素将重新定位到此特定元素，而不是最顶层的相对父元素。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.another-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">absolute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    bottom: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    right: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将 <code>position</code> 设置为 <code>absolute</code>，则会将该元素脱离当前文档流程。这意味着有两个方面：</p><ol><li>您可以将此元素放到任何位置，只需在其最近的相对父项中使用 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 即可。</li><li>绝对元素周围的所有内容都会重排，以填充该元素所剩的剩余空间。</li></ol><p><code>position</code> 值为 <code>fixed</code> 的元素的行为与 <code>absolute</code> 类似，其父级是根 \`\` 元素。固定位置元素会根据您设置的 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 值保持在左上角锚定。</p><p>您可以使用 <code>sticky</code> 实现 <code>fixed</code> 的锚定固定方面以及 <code>relative</code> 的可预测性更强的文档流遵循方面。使用此值时，当视口滚动经过该元素时，它会固定在您设置的 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 值上。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/NWdNGZB?height=600&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上的 Pen NWdNGZB" style="color-scheme:initial;box-sizing:inherit;border:0px;height:600px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe>`,10),A=e("p",null,[i("CSS 布局有很多选择余地，也很灵活。 要深入了解 CSS "),e("a",{href:"/blogs/web/css/flexbox"},"Flexbox"),i(" 和 "),e("a",{href:"/blogs/web/css/grid"},"Grid"),i(" 的强大功能，请继续学习接下来的几个模块。")],-1);function y(v,u){return l(),n("div",null,[h,i(" 各项内容将保持在同一轴上，且在空间用尽时不会换行。 相反，它们会尝试各自挤入同一行。 可以使用 `align-items`、`justify-content` 和 `flex-wrap` 属性更改此行为。 "),p,i(" Flexbox 还会将子元素转换为弹性项，这意味着您可以编写规则来控制这些子元素在 Flex 容器中的行为。您可以更改单个内容的对齐方式、顺序和对齐方式。 您还可以使用 `flex` 属性更改其收缩方式。 "),k,i(" 上面的此示例展示了一个单轴布局。 Flexbox 主要将各个项视为一个组，而网格可让您在两个维度上精确控制项的位置。我们可以定义此网格中的第一项占据 2 行 3 列： "),o,i(" ## 流式布局 "),c,i(" ### 浮点数 "),g,i(" **警告** ：使用 `float` 时，请注意，浮动元素后面的所有元素的布局都可能会调整。为了防止出现这种情况，您可以清除浮动元素，方法是对浮动元素之后的元素使用 `clear: both`，或对浮动元素的父级使用 `display: flow-root`。有关详情，请参阅 [clearfix 黑客攻击结束](https://rachelandrew.co.uk/archives/2017/01/24/the-end-of-the-clearfix-hack/)一文。 "),b,i(" ```css .countries { width: 100%; column-width: 260px; column-gap: 1em; } ``` "),m,i(" 您还可以使用 `column-width` 定义所需的最小宽度，而不是设置拆分的列数。随着视口中的可用空间增多，系统会自动创建更多列，随着空间的减少，列数也会减少。这在响应性网页设计环境中非常有用。 "),B,i(" ## 小结 "),A])}const x=a(r,[["render",y],["__file","layout.html.vue"]]),f=JSON.parse('{"path":"/web/css/layout.html","title":"布局","lang":"zh-CN","frontmatter":{"date":"2024-03-31T00:00:00.000Z","category":"css","tags":["布局"],"description":"布局 假设您是一名开发者，一位设计师同事为您提供一个全新网站的设计。该设计具有各种有趣的布局和组合：考虑视口宽度和高度的二维布局，以及需要流动和灵活的布局。如何确定使用 CSS 来设置这些样式的最佳方式？ CSS 为我们提供了各种方法来解决横轴、纵轴或两者上的布局问题。为上下文选择正确的布局方法可能并非易事，并且通常您可能需要多种布局方法才能解决问题。...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/css/layout.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"布局"}],["meta",{"property":"og:description","content":"布局 假设您是一名开发者，一位设计师同事为您提供一个全新网站的设计。该设计具有各种有趣的布局和组合：考虑视口宽度和高度的二维布局，以及需要流动和灵活的布局。如何确定使用 CSS 来设置这些样式的最佳方式？ CSS 为我们提供了各种方法来解决横轴、纵轴或两者上的布局问题。为上下文选择正确的布局方法可能并非易事，并且通常您可能需要多种布局方法才能解决问题。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T10:18:51.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"布局"}],["meta",{"property":"article:published_time","content":"2024-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T10:18:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"布局\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T10:18:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"布局：简述","slug":"布局-简述","link":"#布局-简述","children":[]},{"level":2,"title":"布局：现在和未来","slug":"布局-现在和未来","link":"#布局-现在和未来","children":[]},{"level":2,"title":"了解 display 属性","slug":"了解-display-属性","link":"#了解-display-属性","children":[]},{"level":2,"title":"Flexbox 和网格","slug":"flexbox-和网格","link":"#flexbox-和网格","children":[{"level":3,"title":"Flexbox","slug":"flexbox","link":"#flexbox","children":[]},{"level":3,"title":"网格","slug":"网格","link":"#网格","children":[]},{"level":3,"title":"内嵌块","slug":"内嵌块","link":"#内嵌块","children":[]},{"level":3,"title":"多列布局","slug":"多列布局","link":"#多列布局","children":[]},{"level":3,"title":"Positioning","slug":"positioning","link":"#positioning","children":[]}]}],"git":{"createdTime":1724483645000,"updatedTime":1724494731000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":2}]},"readingTime":{"minutes":11.61,"words":3484},"filePathRelative":"web/css/layout.md","localizedDate":"2024年3月31日","excerpt":"\\n<p>假设您是一名开发者，一位设计师同事为您提供一个全新网站的设计。该设计具有各种有趣的布局和组合：考虑视口宽度和高度的二维布局，以及需要流动和灵活的布局。如何确定使用 CSS 来设置这些样式的最佳方式？</p>\\n<p>CSS 为我们提供了各种方法来解决横轴、纵轴或两者上的布局问题。为上下文选择正确的布局方法可能并非易事，并且通常您可能需要多种布局方法才能解决问题。为帮助完成这项工作，在接下来的模块中，您将了解每种 CSS 布局机制的独特功能，并据此做出明智的决策。</p>\\n<h2>布局：简述</h2>\\n<p>在 Web 发展初期，使用 `` 元素进行布局的设计会比简单的文档更加复杂。当 CSS 在 90 年代后期浏览器得到广泛采用后，您就可以更轻松地将 HTML 与视觉样式分离开来。 CSS 让开发者能够在不接触 HTML 的情况下完全改变网站的外观和风格。 这项新功能激发了 <a href=\\"http://www.csszengarden.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">The CSS Zen Garden</a> 等项目的灵感，该项目旨在展示 CSS 的强大功能，鼓励更多开发者学习 CSS。</p>","autoDesc":true}');export{x as comp,f as data};
