import{_ as e,c as i,o as a,b as s}from"./app-CJxubWz7.js";const l="/blogs/assets/three-boxes-next-each-w-7b5d0fbdaf522-CtYyNZs9.svg",r="/blogs/assets/three-boxes-different-he-20fd54d77efbb-BhBR-Xg1.svg",d="/blogs/assets/a-labelled-diagram-the-a-a9bf061b5d5b2-K5XQthd9.svg",n="/blogs/assets/a-flex-container-nine-it-e0d8b646b8c9c-Dbt5Qfkb.jpg",t={},o=s('<h1 id="flexbox" tabindex="-1"><a class="header-anchor" href="#flexbox"><span>Flexbox</span></a></h1><p>在自适应设计中，一种可能难以处理的设计模式是内嵌某些内容的边栏。在有视口空间时，这种模式效果很好，但如果空间是压缩的，这种僵化的布局可能会出现问题。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/poRENWv?height=420&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="来自 Codepen 上的 web-dot-dev 的 Pen poRENWv" style="color-scheme:initial;box-sizing:inherit;border:0px;height:420px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>弹性框布局模型 (Flexbox) 是专为一维内容设计的布局模型。 它擅长处理大量不同大小的项，并返回这些项的最佳布局。</p><p>这是这种边栏模式的理想布局模型。Flexbox 不仅有助于内嵌式排列边栏和内容，而且在空间不足时，边栏会另起一行。借助 Flexbox，您可以提供灵活的边界来提示内容的显示方式，而不是为浏览器设置严格的尺寸。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/xxgERMp?height=400&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="来自 Codepen 上的 web-dot-dev 的 Pen xxgERMp" style="color-scheme:initial;box-sizing:inherit;border:0px;height:400px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h2 id="您可以使用-flex-布局执行哪些操作" tabindex="-1"><a class="header-anchor" href="#您可以使用-flex-布局执行哪些操作"><span>您可以使用 Flex 布局执行哪些操作？</span></a></h2><p>Flex 布局具有以下功能，您可以在本指南中了解这些功能。</p><ul><li>表格可以显示为行或列。</li><li>并遵循文档的写入模式。</li><li>默认情况下，它们是单行，但也可以要求换行。</li><li>可以在视觉上对布局中的各个项进行重新排序，使其脱离它们在 DOM 中的顺序。</li><li>空间可以在项内分布，因此它们会根据父级中的可用空间变大或变小。</li><li>您可以使用 Box Alignment 属性在封装布局中的项和 Flex 线条周围分配空间。</li><li>项目本身可以在横轴上对齐。</li></ul><h2 id="主轴和交叉轴" tabindex="-1"><a class="header-anchor" href="#主轴和交叉轴"><span>主轴和交叉轴</span></a></h2><p>理解 Flexbox 的关键是理解主轴和交叉轴的概念。主轴是您的 <code>flex-direction</code> 属性设置的轴。如果值为 <code>row</code>，则主轴沿行，如果为 <code>column</code>，则主轴沿列。</p><figure><img src="'+l+'" alt="三个彼此相邻的方框，带有一个箭头，指向左向右。箭头标示为“主轴”" tabindex="0" loading="lazy"><figcaption>三个彼此相邻的方框，带有一个箭头，指向左向右。箭头标示为“主轴”</figcaption></figure><p>弹性项目会在主轴上成组移动。 请记住：我们有很多功能，我们会尽力为他们群组提供最佳布局。</p><p>交叉轴沿与主轴的相反方向运行，因此如果 <code>flex-direction</code> 为 <code>row</code>，交叉轴沿列延伸。</p><figure><img src="'+r+`" alt="三个高度不同的方框，彼此相邻，旁边有一个箭头指向左向右。箭头标有“主轴”。还有另一个箭头指向底部。这张图标记为“横轴”" tabindex="0" loading="lazy"><figcaption>三个高度不同的方框，彼此相邻，旁边有一个箭头指向左向右。箭头标有“主轴”。还有另一个箭头指向底部。这张图标记为“横轴”</figcaption></figure><p>您可以在交叉轴上完成两项操作。 您可以单独移动这些项目，也可以组移动项目，这样它们就能彼此对齐，并与灵活容器对齐。此外，如果您已换行 Flex 行，则可以将这些行视为组，以控制向这些行分配空间的方式。您可以在本指南中了解实际操作方式，只需注意主轴跟随 <code>flex-direction</code> 即可。</p><h2 id="创建灵活容器" tabindex="-1"><a class="header-anchor" href="#创建灵活容器"><span>创建灵活容器</span></a></h2><p>我们来看看 Flexbox 的行为方式：提取一组大小不同的项并使用 Flexbox 进行布局。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;container&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;container&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;One&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Item two&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;The item we will refer to as three&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如需使用 Flexbox，您需要声明要使用 flex 格式上下文，而不是常规块和内嵌布局。 为此，请将 <code>display</code> 属性的值更改为 <code>flex</code>。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如您在<a href="/blogs/web/css/layout">布局指南</a>中学到的，这会为您提供一个包含 Flex 子项的块级框。Flex 项目会使用其<strong>初始值</strong>立即开始展示一些 Flexbox 行为。</p><p><strong>注意</strong> ：所有 CSS 属性都具有初始值，用于控制在您未应用任何 CSS 来改变初始行为时，这些属性“开箱即用”的行为方式。一旦 Flex 容器的父项获得 <code>display: flex</code>，其子项就会立即变成 Flex 项，因此这些初始值意味着我们将开始看到一些 Flexbox 行为。</p><p>初始值意味着：</p><ul><li>各项会显示为一行。</li><li>它们不会封装。</li><li>它们不会扩展为填满容器。</li><li>它们会在容器的开头对齐。</li></ul><h2 id="控制项的方向" tabindex="-1"><a class="header-anchor" href="#控制项的方向"><span>控制项的方向</span></a></h2><p>即使您尚未添加 <code>flex-direction</code> 属性，这些项仍显示为行，因为 <code>flex-direction</code> 的初始值为 <code>row</code>。如果需要一行，则无需添加属性。 要更改方向，请添加 属性和以下四个值之一：</p><ul><li><code>row</code>：各项内容以行的形式排列。</li><li><code>row-reverse:</code>，这些项从 Flex 容器末尾排列成一行。</li><li><code>column</code>：各项内容以列的形式排列。</li><li><code>column-reverse</code>：这些项从弹性容器末端的一列开始排列。</li></ul><p>在下面的演示中，您可以使用我们这组商品试用所有值。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/bGgKNXq?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上撰写的 Pen bGgKNXq" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h3 id="反转项目和无障碍功能" tabindex="-1"><a class="header-anchor" href="#反转项目和无障碍功能"><span>反转项目和无障碍功能</span></a></h3><p>使用任何会重新排列视觉显示内容的属性，使之与 HTML 文档中内容的排序方式不同时，请务必保持谨慎，因为这可能会对无障碍功能产生负面影响。<code>row-reverse</code> 和 <code>column-reverse</code> 值就是一个很好的例子。重新排序只会针对视觉顺序进行，而不会针对逻辑顺序进行。了解这一点非常重要，因为逻辑顺序是屏幕阅读器读出内容的顺序，并且任何使用键盘浏览的用户都会遵循。</p><p>任何能够更改 Flexbox 或网格中项顺序的操作都可能会导致此问题。 因此，在进行任何重新排序时，都应进行全面测试，以确保您的网站不会导致某些人难以使用。</p><p>如需了解详情，请参阅以下内容：</p><ul><li><a href="https://tink.uk/flexbox-the-keyboard-navigation-disconnect/" target="_blank" rel="noopener noreferrer">Flexbox 与键盘导航断开连接</a></li></ul><h3 id="写入模式和方向" tabindex="-1"><a class="header-anchor" href="#写入模式和方向"><span>写入模式和方向</span></a></h3><p>默认情况下，Flex 项目显示为一行。一行会按照您书写模式和脚本方向的句子流动方向运行。 这意味着，如果您使用的是具有从右到左 (rtl) 脚本方向的阿拉伯语，这些项将在右侧对齐。制表符顺序也从右侧开始，因为这是阿拉伯语句子的阅读方式。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/ExZgwWN?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Codepen 上的 web-dot-dev 提供的 Pen ExZgwWN" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>如果您使用的是垂直书写模式（例如某些日语字体），则一行会从上到下垂直排列。尝试更改此演示中使用垂直书写模式的 <code>flex-direction</code>。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/qBRaPXX?height=600&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Pen qBRaPXX 由 web-dot-dev 在 Codepen" style="color-scheme:initial;box-sizing:inherit;border:0px;height:600px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>因此，默认情况下 Flex 项的行为方式与文档的写入模式相关联。大多数教程使用英语或其他水平（从左到右）书写模式编写。这样就可以轻松假设弹性项位于<strong>左侧</strong>，并且<strong>水平</strong>运行。</p><p>有了主轴和横轴以及要考虑书写模式后，我们讨论的 <strong>start</strong> 和 <strong>end</strong>（而不是 Flexbox 中的顶部、底部、左侧和右侧）可能更容易理解。每条轴都有一个起点和终点。主轴的起点称为“main-start”。因此，我们的 Flex 项目一开始从主线开始就排成一行。 该轴的末端是 main-end。交叉轴的起点为 <strong>cross-start</strong>，终点为 <strong>cross-end</strong>。</p><figure><img src="`+d+'" alt="上述术语的加标签图表" tabindex="0" loading="lazy"><figcaption>上述术语的加标签图表</figcaption></figure><h2 id="封装-flex-项" tabindex="-1"><a class="header-anchor" href="#封装-flex-项"><span>封装 Flex 项</span></a></h2><p><code>flex-wrap</code> 属性的初始值为 <code>nowrap</code>。这意味着，如果容器中空间不足，内容将会溢出。</p><p><img src="'+n+`" alt="一个 Flex 容器里有 9 个项，这些项已缩小，因此一个单词在一行上，但没有足够的空间来并排显示这些 Flex 项，因此这些 Flex 项已延伸到容器外。" loading="lazy">一旦达到最小内容大小的弹性项目，就会开始溢出容器</p><p>使用初始值显示的项会尽可能缩小，在溢出发生之前会缩小到 <code>min-content</code>。</p><p>如需将项封装，请将 <code>flex-wrap: wrap</code> 添加到灵活容器中。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flex-wrap: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">wrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/WNRGdNZ?height=601&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上发布的 Pen WNRGdNZ" style="color-scheme:initial;box-sizing:inherit;border:0px;height:601px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>当弹性容器封装时，它会创建多个<strong>弹性线条</strong>。就空间分配而言，每一行就像一个新的灵活容器。 因此，如果您要换行，那么第 2 行中的内容将无法与第 1 行中其上方的内容对齐。这就是 Flexbox 是一维的。您可以控制单轴、行或列的对齐方式，但不能像在网格中那样同时控制两者的对齐方式。</p><h3 id="flex-flow-简写形式" tabindex="-1"><a class="header-anchor" href="#flex-flow-简写形式"><span>flex-flow 简写形式</span></a></h3><p>您可以使用简写形式 <code>flex-flow</code> 设置 <code>flex-direction</code> 和 <code>flex-wrap</code> 属性。例如，如需将 <code>flex-direction</code> 设置为 <code>column</code> 并允许换行，请使用以下代码：</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flex-flow: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">column</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> wrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制-flex-内容内的空间" tabindex="-1"><a class="header-anchor" href="#控制-flex-内容内的空间"><span>控制 flex 内容内的空间</span></a></h2><p>假设容器的空间大于显示项所需的空间，这些项会在开始时对齐，且不会增大以填满空间。它们会在达到内容大小上限时停止增长。 这是因为 <code>flex-</code> 属性的初始值为：</p><ul><li><code>flex-grow: 0</code>：项不会变大。</li><li><code>flex-shrink: 1</code>：项可以缩小到小于其 <a href="https://developer.mozilla.org/docs/Web/CSS/flex-basis" target="_blank" rel="noopener noreferrer"><code>flex-basis</code></a>。</li><li><code>flex-basis: auto</code>：项的基本大小为 <code>auto</code>。</li></ul><p>这可以用关键字值 <code>flex: initial</code> 表示。<code>flex</code> 简写属性或 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 的长字会应用于灵活容器的子级。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/LYxRebE?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Codepen 上的 web-dot-dev 的 Pen LYxRebE" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>如需使内容项增大，同时允许大型项拥有比小型项更多的空间，请使用 <code>flex:auto</code>。您可以通过上面的演示尝试此操作。 这会将属性设置为：</p><ul><li><code>flex-grow: 1</code>：项的大小可以超过其 <code>flex-basis</code>。</li><li><code>flex-shrink: 1</code>：内容可以缩小到小于其 <code>flex-basis</code> 的值。</li><li><code>flex-basis: auto</code>：项的基本大小为 <code>auto</code>。</li></ul><p>使用 <code>flex: auto</code> 意味着列表项以不同的大小结束，因为列表项之间共享的空间会在将每项内容布局为最大内容大小之后共享。 因此，较大的项目将获得更多空间。 如需强制所有项具有一致的大小并忽略内容的大小，请在演示中将 <code>flex:auto</code> 更改为 <code>flex: 1</code>。</p><p>这会解压缩到：</p><ul><li><code>flex-grow: 1</code>：项的大小可以超过其 <code>flex-basis</code>。</li><li><code>flex-shrink: 1</code>：内容可以缩小到小于其 <code>flex-basis</code> 的值。</li><li><code>flex-basis: 0</code>：项的基本大小为 <code>0</code>。</li></ul><p>使用 <code>flex: 1</code> 表示所有项的大小均为零，因此灵活容器中的所有空间均可分配。由于所有项的 <code>flex-grow</code> 因数均为 <code>1</code>，因此它们平均增长，并且均分空间。</p><p><strong>注意</strong> ：还有一个值 <code>flex: none</code>，这会为您提供不会放大或缩小的不够灵活的 Flex 内容。如果您单纯使用 Flexbox 访问对齐属性，但不需要任何灵活行为，这样做可能很有用。</p><h3 id="允许商品以不同的速率增长" tabindex="-1"><a class="header-anchor" href="#允许商品以不同的速率增长"><span>允许商品以不同的速率增长</span></a></h3><p>您不必将所有项的 <code>flex-grow</code> 系数都设为 <code>1</code>。您可以为 Flex 项指定不同的 <code>flex-grow</code> 系数。在下面的演示中，第一个项目具有 <code>flex: 1</code>、第二个 <code>flex: 2</code> 和第三个 <code>flex: 3</code>。当这些内容从 <code>0</code> 开始增长时，灵活容器中的可用空间会共享为 6。其中一部分分配给第一项，两部分分配给第二项，三部分分配给第三项。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/OJWRzEz?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Codepen 上的 web-dot-dev 的 Pen OJWRzEz" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>您可以通过 <code>auto</code> 的 <code>flex-basis</code> 执行相同的操作，但需要指定三个值。第一个值为 <code>flex-grow</code>、第二个 <code>flex-shrink</code> 和第三个 <code>flex-basis</code>。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.item1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flex: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.item2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flex: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个不太常见的用例，因为使用 <code>auto</code> 的 <code>flex-basis</code> 的原因是允许浏览器确定空间分配。如果您希望项的增长幅度略超过算法确定的值，但它可能很有用。</p><h2 id="对-flex-内容重新排序" tabindex="-1"><a class="header-anchor" href="#对-flex-内容重新排序"><span>对 Flex 内容重新排序</span></a></h2><p>您可以使用 <code>order</code> 属性对灵活容器中的项重新排序。此属性允许对<strong>序数组</strong>中的项进行排序。列表项会按照 <code>flex-direction</code> 指示的方向进行排列，值最低的排在最前面。如果多项内容具有相同的值，则该属性会与具有该值的其他项一起显示。</p><p>以下示例演示了这一排序。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/NWdRXoL?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen NWdRXoL" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p><strong>警告</strong> ：使用 <code>order</code> 时，会与 <code>flex-direction</code> 的 <code>row-reverse</code> 和 <code>column-reverse</code> 值出现相同的问题。对于某些用户而言，这会很容易造成不连贯的体验。请勿使用 <code>order</code>，因为您要修正文档中的部分混乱问题。如果这些项在逻辑上应该具有不同的顺序，请更改您的 HTML！</p><h2 id="flexbox-对齐方式概述" tabindex="-1"><a class="header-anchor" href="#flexbox-对齐方式概述"><span>Flexbox 对齐方式概述</span></a></h2><p>Flexbox 附带了一组属性，用于对齐项以及在项之间分配空间。这些属性非常有用，因为这些属性已移至其自己的规范中，因此网格布局中也会出现这些属性。在此处，您可以了解使用 Flexbox 时它们是如何工作的。</p><p>该属性集可以分为两组。用于空间分布的属性以及用于对齐的属性。 分配空间的属性包括：</p><ul><li><code>justify-content</code>：主轴上的空间分布情况。</li><li><code>align-content</code>：横轴上的空间分布情况。</li><li><code>place-content</code>：设置上述两个属性的简写形式。</li></ul><p>Flexbox 中用于对齐的属性：</p><ul><li><code>align-self</code>：在交叉轴上对齐单个项。</li><li><code>align-items</code>：将所有项作为一个组在交叉轴上对齐。</li></ul><p>如果您处理的是主轴，则这些属性以 <code>justify-</code> 开头。在横轴上，它们以 <code>align-</code> 开头。</p><h2 id="在主轴上分配空间" tabindex="-1"><a class="header-anchor" href="#在主轴上分配空间"><span>在主轴上分配空间</span></a></h2><p>在之前使用的 HTML 中，Flex 项排成一行，主轴上有空间。 内容项不够大，无法完全填满 Flex 容器。 这些项在 Flex 容器的开头对齐，因为 <code>justify-content</code> 的初始值为 <code>flex-start</code>。这些项的开头将排成一行，结尾处还有多余的空格。</p><p>将 <code>justify-content</code> 属性添加到灵活容器，将其值设为 <code>flex-end</code>，这样，项就会排列在容器的末尾，而空闲空间则会排列在开头。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    justify-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex-end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用 <code>justify-content: space-between</code> 在列表项之间分配空间。</p><p>请尝试演示中的某些值，并<a href="https://developer.mozilla.org/docs/Web/CSS/justify-content" target="_blank" rel="noopener noreferrer">参阅 MDN</a> 以了解全部可能值。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/JjERpGb?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen JjERpGb" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p><strong>注意</strong> ：为了让 <code>justify-content</code> 属性执行任何操作，您必须在主轴上的容器中留出足够的空间。如果您的项填充了轴，则表示没有空间可供共享，因此该属性将不执行任何操作。</p><h3 id="活动门票提供商-flex-direction-column" tabindex="-1"><a class="header-anchor" href="#活动门票提供商-flex-direction-column"><span>活动门票提供商：<code>flex-direction: column</code></span></a></h3><p>如果您已将 <code>flex-direction</code> 更改为 <code>column</code>，则 <code>justify-content</code> 将对该列执行操作。要在以列的形式工作时在容器中有空闲空间，您需要为容器提供 <code>height</code> 或 <code>block-size</code>。否则，您将没有空闲空间来分发。</p><p>尝试使用不同的值，这次使用 Flexbox 列布局。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/bGgwLgz?height=600&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上发布的 Pen bGgwLgz" style="color-scheme:initial;box-sizing:inherit;border:0px;height:600px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h2 id="在弹性线条之间分配空间" tabindex="-1"><a class="header-anchor" href="#在弹性线条之间分配空间"><span>在弹性线条之间分配空间</span></a></h2><p>如果使用封装的弹性容器，则您可能有空间在横轴上分布。在这种情况下，您可以使用与 <code>justify-content</code> 相同的值 <code>align-content</code> 属性。与默认将项与 <code>flex-start</code> 对齐的 <code>justify-content</code> 不同，<code>align-content</code> 的初始值为 <code>stretch</code>。将属性 <code>align-content</code> 添加到灵活容器以更改该默认行为。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    align-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请在演示中试用此功能。 该示例包含 Flex 项的换行，并且容器具有 <code>block-size</code>，以便留出一些空闲空间。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/poREawo?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 Codepen 上的 web-dot-dev 撰写的 Pen poREwake" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h3 id="place-content-简写形式" tabindex="-1"><a class="header-anchor" href="#place-content-简写形式"><span><code>place-content</code> 简写形式</span></a></h3><p>如需同时设置 <code>justify-content</code> 和 <code>align-content</code>，您可以使用 <code>place-content</code> 并指定一个或两个值。如果您指定第一个值用于 <code>align-content</code>，第二个用于 <code>justify-content</code>，则这两个轴将使用同一值。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    place-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">space-between</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/* sets both to space-between */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    place-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> flex-end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/* wrapped lines on the cross axis are centered,  on the main axis items are aligned to the end of the flex container */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在交叉轴上对齐项目" tabindex="-1"><a class="header-anchor" href="#在交叉轴上对齐项目"><span>在交叉轴上对齐项目</span></a></h2><p>在横轴上，您还可以使用 <code>align-items</code> 和 <code>align-self</code> 在 Flex 线条中对齐项目。用于此对齐方式的空间取决于灵活容器的高度，或者灵活线条（如果项目是一组换行）的高度。</p><p><code>align-self</code> 的初始值为 <code>stretch</code>，因此默认情况下，一行中的 Flex 项会拉伸至最高项的高度。若要更改此设置，请将 <code>align-self</code> 属性添加到您的任意 Flex 项中。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.item1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    align-self: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex-start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用以下任何值对齐项：</p><ul><li><code>flex-start</code></li><li><code>flex-end</code></li><li><code>center</code></li><li><code>stretch</code></li><li><code>baseline</code></li></ul><p>请参阅 <a href="https://developer.mozilla.org/docs/Web/CSS/align-self" target="_blank" rel="noopener noreferrer">MDN 上值的完整列表</a>。</p><p>下一个演示包含一行包含 <code>flex-direction: row</code> 的 Flex 内容。最后一项用于定义灵活容器的高度。 第一项具有 <code>align-self</code> 属性，其值为 <code>flex-start</code>。请尝试更改该属性的值，看看它在横轴空间中的移动情况。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/RwKGQee?height=600&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen RwKGQee" style="color-scheme:initial;box-sizing:inherit;border:0px;height:600px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p><code>align-self</code> 属性会应用于各个项。<code>align-items</code> 属性可应用于灵活容器，将所有单独的 <code>align-self</code> 属性设置为一个组。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    align-items: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex-start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下一个演示中，请尝试更改 <code>align-items</code> 的值，使交叉轴上的所有项成组对齐。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/QWdKmby?height=600&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen QWdKmby" style="color-scheme:initial;box-sizing:inherit;border:0px;height:600px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h2 id="为什么-flexbox-中没有-justify-self" tabindex="-1"><a class="header-anchor" href="#为什么-flexbox-中没有-justify-self"><span>为什么 Flexbox 中没有 justify-self？</span></a></h2><p>Flex 项目在主轴上作为一个组进行操作。因此，没有将单个项拆分到该组之外的概念。</p><p>在网格布局中，<code>justify-self</code> 和 <code>justify-items</code> 属性作用于内嵌轴，以便在相应轴上的网格区域内对齐各项。由于 Flex 布局将项目视为一个组，因此这些属性无法在 Flex 上下文中实现。</p><p>值得一提的是，Flexbox 与自动外边距确实非常好用。如果您需要将一个项从组中拆分出来，或需要将一个组分为两组，可以通过应用外边距来实现此目的。在下面的示例中，最后一项的左外边距为 <code>auto</code>。自动外边距会吸收其应用方向上的所有空间。 这意味着它会将项推送到右侧，从而拆分组。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/poRELbR?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上撰写的 Pen poRELbR" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h2 id="如何将内容垂直和水平居中" tabindex="-1"><a class="header-anchor" href="#如何将内容垂直和水平居中"><span>如何将内容垂直和水平居中</span></a></h2><p>对齐方式属性可用于将一个项放在另一个框内。<code>justify-content</code> 属性用于在主轴（即行）上对齐项。交叉轴上的 <code>align-items</code> 属性。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">400</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">300</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    justify-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    align-items: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> ：将来，我们可能无需将父级设为灵活容器，即可实现这种对齐。为块布局和内嵌布局指定了对齐属性。目前，还没有浏览器实现这些 API。但是，切换到灵活格式上下文后，您便可以访问属性。如果您需要对齐对象，这是一个很好的方法。</p><h2 id="资源" tabindex="-1"><a class="header-anchor" href="#资源"><span>资源</span></a></h2><ul><li><a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Flexible_Box_Layout" target="_blank" rel="noopener noreferrer">MDN CSS Flexible Box Layout</a> 包含一系列带示例的详细指南。</li><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener noreferrer">Flexbox CSS 技巧指南</a></li><li><a href="https://www.smashingmagazine.com/2018/08/flexbox-display-flex-container/" target="_blank" rel="noopener noreferrer">创建 Flexbox Flex 容器后的情况</a></li><li><a href="https://www.smashingmagazine.com/2018/08/flexbox-alignment/" target="_blank" rel="noopener noreferrer">您需要了解的关于 Flexbox 中对齐功能的一切信息</a></li><li><a href="https://www.smashingmagazine.com/2018/09/flexbox-sizing-flexible-box/" target="_blank" rel="noopener noreferrer">灵活盒有多大？</a></li><li><a href="https://www.smashingmagazine.com/2018/10/flexbox-use-cases/" target="_blank" rel="noopener noreferrer">Flexbox 使用场景</a></li><li><a href="https://developer.chrome.com/docs/devtools/css/flexbox" target="_blank" rel="noopener noreferrer">在 Chrome 开发者工具中检查和调试 CSS Flexbox 布局</a></li></ul>`,128),p=[o];function h(c,k){return a(),i("div",null,p)}const g=e(t,[["render",h],["__file","flexbox.html.vue"]]),m=JSON.parse('{"path":"/web/css/flexbox.html","title":"Flexbox","lang":"zh-CN","frontmatter":{"date":"2024-03-31T00:00:00.000Z","category":"css","tags":["弹性","布局"],"description":"Flexbox 在自适应设计中，一种可能难以处理的设计模式是内嵌某些内容的边栏。在有视口空间时，这种模式效果很好，但如果空间是压缩的，这种僵化的布局可能会出现问题。 弹性框布局模型 (Flexbox) 是专为一维内容设计的布局模型。 它擅长处理大量不同大小的项，并返回这些项的最佳布局。 这是这种边栏模式的理想布局模型。Flexbox 不仅有助于内嵌式排...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/css/flexbox.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"Flexbox"}],["meta",{"property":"og:description","content":"Flexbox 在自适应设计中，一种可能难以处理的设计模式是内嵌某些内容的边栏。在有视口空间时，这种模式效果很好，但如果空间是压缩的，这种僵化的布局可能会出现问题。 弹性框布局模型 (Flexbox) 是专为一维内容设计的布局模型。 它擅长处理大量不同大小的项，并返回这些项的最佳布局。 这是这种边栏模式的理想布局模型。Flexbox 不仅有助于内嵌式排..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T10:18:51.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"弹性"}],["meta",{"property":"article:tag","content":"布局"}],["meta",{"property":"article:published_time","content":"2024-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T10:18:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Flexbox\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T10:18:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"您可以使用 Flex 布局执行哪些操作？","slug":"您可以使用-flex-布局执行哪些操作","link":"#您可以使用-flex-布局执行哪些操作","children":[]},{"level":2,"title":"主轴和交叉轴","slug":"主轴和交叉轴","link":"#主轴和交叉轴","children":[]},{"level":2,"title":"创建灵活容器","slug":"创建灵活容器","link":"#创建灵活容器","children":[]},{"level":2,"title":"控制项的方向","slug":"控制项的方向","link":"#控制项的方向","children":[{"level":3,"title":"反转项目和无障碍功能","slug":"反转项目和无障碍功能","link":"#反转项目和无障碍功能","children":[]},{"level":3,"title":"写入模式和方向","slug":"写入模式和方向","link":"#写入模式和方向","children":[]}]},{"level":2,"title":"封装 Flex 项","slug":"封装-flex-项","link":"#封装-flex-项","children":[{"level":3,"title":"flex-flow 简写形式","slug":"flex-flow-简写形式","link":"#flex-flow-简写形式","children":[]}]},{"level":2,"title":"控制 flex 内容内的空间","slug":"控制-flex-内容内的空间","link":"#控制-flex-内容内的空间","children":[{"level":3,"title":"允许商品以不同的速率增长","slug":"允许商品以不同的速率增长","link":"#允许商品以不同的速率增长","children":[]}]},{"level":2,"title":"对 Flex 内容重新排序","slug":"对-flex-内容重新排序","link":"#对-flex-内容重新排序","children":[]},{"level":2,"title":"Flexbox 对齐方式概述","slug":"flexbox-对齐方式概述","link":"#flexbox-对齐方式概述","children":[]},{"level":2,"title":"在主轴上分配空间","slug":"在主轴上分配空间","link":"#在主轴上分配空间","children":[{"level":3,"title":"活动门票提供商：flex-direction: column","slug":"活动门票提供商-flex-direction-column","link":"#活动门票提供商-flex-direction-column","children":[]}]},{"level":2,"title":"在弹性线条之间分配空间","slug":"在弹性线条之间分配空间","link":"#在弹性线条之间分配空间","children":[{"level":3,"title":"place-content 简写形式","slug":"place-content-简写形式","link":"#place-content-简写形式","children":[]}]},{"level":2,"title":"在交叉轴上对齐项目","slug":"在交叉轴上对齐项目","link":"#在交叉轴上对齐项目","children":[]},{"level":2,"title":"为什么 Flexbox 中没有 justify-self？","slug":"为什么-flexbox-中没有-justify-self","link":"#为什么-flexbox-中没有-justify-self","children":[]},{"level":2,"title":"如何将内容垂直和水平居中","slug":"如何将内容垂直和水平居中","link":"#如何将内容垂直和水平居中","children":[]},{"level":2,"title":"资源","slug":"资源","link":"#资源","children":[]}],"git":{"createdTime":1724483645000,"updatedTime":1724494731000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":2}]},"readingTime":{"minutes":20.58,"words":6175},"filePathRelative":"web/css/flexbox.md","localizedDate":"2024年3月31日","excerpt":"\\n<p>在自适应设计中，一种可能难以处理的设计模式是内嵌某些内容的边栏。在有视口空间时，这种模式效果很好，但如果空间是压缩的，这种僵化的布局可能会出现问题。</p>\\n<iframe allow=\\"camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;\\" loading=\\"lazy\\" src=\\"https://codepen.io/web-dot-dev/embed/poRENWv?height=420&amp;theme-id=light&amp;default-tab=result&amp;editable=true\\" data-darkreader-inline-border-top=\\"\\" data-darkreader-inline-border-right=\\"\\" data-darkreader-inline-border-bottom=\\"\\" data-darkreader-inline-border-left=\\"\\" data-title=\\"来自 Codepen 上的 web-dot-dev 的 Pen poRENWv\\" style=\\"color-scheme: initial; box-sizing: inherit; border: 0px; height: 420px; width: 100%; --darkreader-inline-border-top: 0px; --darkreader-inline-border-right: 0px; --darkreader-inline-border-bottom: 0px; --darkreader-inline-border-left: 0px;\\"></iframe>","autoDesc":true}');export{g as comp,m as data};
