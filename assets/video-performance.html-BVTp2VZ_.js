import{_ as e,c as i,o as s,b as a}from"./app-C58kMEDU.js";const t={},r=a(`<h1 id="视频表现" tabindex="-1"><a class="header-anchor" href="#视频表现"><span>视频表现</span></a></h1><p>在<a href="/blogs/web/performance/image-performance">上一单元</a>中，您学习了与图片相关的一些性能技术。图片是网络上广泛使用的资源类型，但要谨慎优化并考虑用户的视口，则会占用大量带宽。</p><p>但是，图片并不是网络上常见的唯一媒体类型。视频是网页上常用的另一种媒体类型。查看一些可能的优化措施之前，请务必先了解 <code>&lt;video&gt;</code> 元素的工作原理。</p><h2 id="视频源文件" tabindex="-1"><a class="header-anchor" href="#视频源文件"><span>视频源文件</span></a></h2><p>处理媒体文件时，您在操作系统中识别的文件（<code>.mp4</code>、<code>.webm</code> 等）称为容器。一个容器包含一个或多个数据流。在大多数情况下，这是指视频和音频流。</p><p>您可以使用编解码器压缩每个流。例如，<code>video.webm</code> 可以是 <a href="https://www.webmproject.org/" target="_blank" rel="noopener noreferrer">WebM</a> 容器，其中包含使用 <a href="https://en.wikipedia.org/wiki/VP9" target="_blank" rel="noopener noreferrer">VP9</a> 压缩的视频流和使用 <a href="https://en.wikipedia.org/wiki/Vorbis" target="_blank" rel="noopener noreferrer">Vorbis</a> 压缩的音频流。</p><p>了解容器和编解码器之间的区别很有帮助，因为它可以帮助您使用明显更少的带宽压缩媒体文件，从而缩短总体网页加载时间，并有望改善网页的 <a href="https://web.dev/articles/lcp" target="_blank" rel="noopener noreferrer">Largest Contentful Paint (LCP)</a>。LCP 是一项<a href="https://web.dev/articles/user-centric-performance-metrics" target="_blank" rel="noopener noreferrer">以用户为中心的指标</a>，也是三个<a href="https://web.dev/articles/vitals" target="_blank" rel="noopener noreferrer">核心网页指标</a>之一。</p><p>压缩视频文件的一种方法需要使用 <a href="https://ffmpeg.org/" target="_blank" rel="noopener noreferrer">FFmpeg</a>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffmpeg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input.mov</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output.webm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述命令虽然与使用 FFmpeg 时的基本一样，但会接受 <code>input.mov</code> 文件，并使用默认 FFmpeg 选项输出 <code>output.webm</code> 文件。上述命令会输出一个较小的视频文件，该文件适用于所有新型浏览器。通过调整<a href="https://ffmpeg.org/ffmpeg.html#Video-Options" target="_blank" rel="noopener noreferrer">视频</a>或 <a href="https://ffmpeg.org/ffmpeg.html#Audio-Options" target="_blank" rel="noopener noreferrer">FFmpeg 提供的音频选项</a>，您可以进一步缩减视频的文件大小。例如，如果您要使用 <code>&lt;video&gt;</code> 元素替换 GIF，则应移除相应音轨：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffmpeg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input.mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -an</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output.webm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>重要提示</strong> ：<a href="https://ffmpeg.org/ffmpeg.html#Audio-Options" target="_blank" rel="noopener noreferrer"><code>-an</code></a> 标志会从输出文件中移除所有音频流。如果您的视频用例不需要音频（例如，<a href="https://web.dev/articles/replace-gifs-with-videos" target="_blank" rel="noopener noreferrer">使用视频替换动画 GIF</a>），那么这是一项重要的优化，因为移除音频流会减小视频文件的大小，即使源视频文件中已有的音频流处于无声状态也是如此。如果您想进一步调整，FFmpeg 在不使用可变比特率编码的情况下压缩视频时，提供了 <code>-crf</code> 标志。<code>-crf</code> 代表“恒定速率系数”。通过接受给定范围内的整数，可以调整压缩级别。</p><p>H.264 和 VP9 等编解码器支持 <code>-crf</code> 标志，但其使用方式取决于您所使用的编解码器。如需了解详情，请参阅<a href="https://trac.ffmpeg.org/wiki/Encode/H.264#crf" target="_blank" rel="noopener noreferrer">以 H.264 格式对视频编码的恒定速率系数</a>，以及<a href="https://trac.ffmpeg.org/wiki/Encode/VP9#constantq" target="_blank" rel="noopener noreferrer">使用 VP9 对视频进行编码时的恒定质量</a>。</p><h3 id="多种形式" tabindex="-1"><a class="header-anchor" href="#多种形式"><span>多种形式</span></a></h3><p>使用视频文件时，如果浏览器不支持所有现代格式，那么指定多种格式可以作为后备选项。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.webm&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video/webm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.mp4&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video/mp4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<a href="https://caniuse.com/mpeg4" target="_blank" rel="noopener noreferrer">所有现代浏览器都支持 H.264 编解码器</a>，因此 MP4 可用作旧版浏览器的后备方案。WebM 版本可以使用较新的 <a href="https://en.wikipedia.org/wiki/AV1" target="_blank" rel="noopener noreferrer">AV1 编解码器</a>（<a href="https://caniuse.com/av1" target="_blank" rel="noopener noreferrer">尚未得到广泛支持</a>），也可以使用较早的 VP9 编解码器（<a href="https://caniuse.com/webm" target="_blank" rel="noopener noreferrer">比 AV1 支持更好</a>，但通常不能像 AV1 那样压缩）。</p><p><strong>注意</strong> ：与 <code>&lt;picture&gt;</code> 元素类似，您在 <code>&lt;video&gt;</code> 元素中列出 <code>&lt;source&gt;</code> 子元素的顺序决定了浏览器的优先级。如果您先指定 MP4 来源，则浏览器会选择该格式，而不考虑它是否支持可能指定的更高效的格式。## <code>poster</code> <strong>属性</strong></p><p>视频的海报图片是使用 <code>&lt;video&gt;</code> 元素上的 <a href="https://developer.mozilla.org/docs/Web/HTML/Element/video#attr-poster" target="_blank" rel="noopener noreferrer"><code>poster</code> 属性</a>添加的，该属性会在开始播放前向用户提示视频内容可能是什么：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> poster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poster.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.webm&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video/webm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.mp4&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video/mp4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> ：没有 <code>poster</code> 图片的 <code>&lt;video&gt;</code> 元素以前不是 <a href="https://web.dev/articles/lcp#what-elements-are-considered" target="_blank" rel="noopener noreferrer">LCP 候选版本</a>。 <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1289664" target="_blank" rel="noopener noreferrer">此问题</a>现已解决，视频文件的第一帧（经过绘制）将被视为 LCP 候选内容。如果您的网站会大量使用视频文件，请务必使用 <code>poster</code> 属性（如果视频不能自动播放），或确保视频 LCP 候选版本经过优化，以便在未使用 <code>poster</code> 属性时能够尽快显示。## 自动播放</p><p>根据 HTTP Archive，网络上 <a href="https://almanac.httparchive.org/en/2022/media#fig-37" target="_blank" rel="noopener noreferrer">20% 的视频</a>包含 <code>autoplay</code> 属性。<code>autoplay</code> 在必须立即播放时使用，例如用作视频背景或<a href="https://web.dev/articles/replace-gifs-with-videos" target="_blank" rel="noopener noreferrer">替换动画 GIF</a>。</p><p>GIF 动画可能会非常大，特别是当它有许多包含复杂细节的帧时。动画 GIF 会消耗数兆字节的数据并不罕见，这会大量消耗带宽，以更好地用于更关键的资源。您通常应该避免使用动画图片格式，因为 <code>&lt;video&gt;</code> 等效项对于此类媒体的效率要高得多。</p><p>如果您的网站要求自动播放视频，您可以直接在 <code>&lt;video&gt;</code> 元素上使用 <code>autoplay</code> 属性：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!-- This will automatically play a video, but</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     it will loop continuously and be muted: --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> autoplay</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> muted</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> loop</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> playsinline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.webm&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video/webm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video.mp4&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;video/mp4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> ：具有指定 <code>autoplay</code> 属性的 <code>&lt;video&gt;</code> 元素会立即开始下载，即使这些元素位于初始视口之外也是如此。通过结合使用 <code>poster</code> 属性与 <a href="https://developer.mozilla.org/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener noreferrer">Intersection Observer API</a>，您可以将页面配置为仅在视频位于视口内时<a href="https://web.dev/articles/lazy-loading-video#video-gif-replacement" target="_blank" rel="noopener noreferrer">下载</a>。<code>poster</code> 图片可能是低画质的图片占位符，例如视频的第一帧。视频显示在视口中后，浏览器就会开始下载视频。这可以缩短初始视口内内容的加载时间。但其缺点是，为 <code>autoplay</code> 使用 <code>poster</code> 图片时，您的用户收到的图片只会短暂显示，直到视频加载完毕并开始播放。</p><p><strong>注意</strong> ：网页加载时自动播放视频可能会让用户感到不舒服，尤其是在视频包含音频串流的情况下，如果设备音量很大，视频可能会让观看者感到惊悚。自动播放功能应仅在必要时使用，并且应考虑到用户预期的需求。为尽可能减少由自动播放视频导致的糟糕用户体验，各浏览器针对视频满足自动播放条件设定了不同的条件。如需了解详情，请参阅 <a href="https://developer.chrome.com/blog/autoplay/" target="_blank" rel="noopener noreferrer">Chrome</a> 和 <a href="https://webkit.org/blog/7734/auto-play-policy-changes-for-macos/" target="_blank" rel="noopener noreferrer">WebKit</a> 的自动播放政策。## 用户启动的播放</p><p>通常，一旦 HTML 解析器发现 <code>&lt;video&gt;</code> 元素，浏览器就会开始下载视频文件。如果您有 <code>&lt;video&gt;</code> 元素在用户发起播放时播放，那么您可能需要等到用户与其互动之后，才开始下载视频。</p><p>您可以使用 <code>&lt;video&gt;</code> 元素的 <a href="https://developer.mozilla.org/docs/Web/HTML/Element/video#attr-preload" target="_blank" rel="noopener noreferrer"><code>preload</code></a> 属性来影响为视频资源下载的内容：</p><ul><li>设置 <code>preload=&quot;none&quot;</code> 可告知浏览器不应预加载任何视频内容。</li><li>设置 <code>preload=&quot;metadata&quot;</code> 仅提取视频元数据，例如视频时长，可能还有一些其他粗略信息。</li></ul><p>如果您要加载用户需要开始播放的视频，则最好设置 <code>preload=&quot;none&quot;</code>。</p><p><strong>注意</strong> ：<code>preload</code> 属性是一个<em>提示</em> - 浏览器可能会选择不遵循该属性，并且它在不同浏览器中或在将移动设备与桌面设备进行比较时的行为方式可能会有所不同。在这种情况下，您可以通过添加 <code>poster</code> 图片来改善用户体验。这可以向用户提供关于视频内容的一些背景信息。此外，如果海报图片是您的 LCP 元素，您可以使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 提示和 <code>fetchpriority=&quot;high&quot;</code> 来提高 <code>poster</code> 图片的优先级：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;image&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poster.jpg&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> fetchpriority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;high&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>注意</strong> ：如果视频不是视口中的最大元素，预加载 <code>poster</code> 图片可能会因为带宽争用而延迟 LCP，这时可用带宽会分配给其他更关键的资源。## 嵌入</p><p>考虑到高效优化和提供视频内容非常复杂，有必要将此问题分流给 YouTube 或 Vimeo 等专用视频服务。这些服务会为您优化视频的传送过程，但嵌入来自第三方服务的视频可能会对性能产生自身的影响，因为嵌入的视频播放器通常会提供大量额外的资源，例如 JavaScript。</p><p>鉴于这种现实，第三方视频嵌入可能会显著影响网页性能。根据 HTTP Archive，YouTube 嵌入网站的主线程阻塞超过 <a href="https://almanac.httparchive.org/en/2022/third-parties#fig-8" target="_blank" rel="noopener noreferrer">1.7 秒</a>。长时间阻塞主线程是一个严重的用户体验问题，可能会影响网页的 <a href="https://web.dev/articles/inp" target="_blank" rel="noopener noreferrer">Interaction to Next Paint (INP)</a>。不过，您可以在初始页面加载期间不立即加载嵌入内容，而是为嵌入创建一个占位符，并在用户与之互动时将其替换为实际的视频嵌入，从而做出妥协。</p><p><strong>重要提示</strong> ：如需了解有关 Facade，请参阅<a href="/blogs/web/performance/lazy-load-images-and-iframe-elements#facades">介绍延迟加载图像和 <code>&lt;iframe&gt;</code> 元素的模块中的 Facade 的部分</a>。## 视频演示</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi" loading="lazy" src="https://glitch.com/embed/#!/embed/learn-performance-video?attributionHidden=true&amp;sidebarCollapsed=true&amp;previewSize=100" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="学习效果视频"></iframe>`,38),n=[r];function l(o,p){return s(),i("div",null,n)}const d=e(t,[["render",l],["__file","video-performance.html.vue"]]),k=JSON.parse('{"path":"/web/performance/video-performance.html","title":"视频表现","lang":"zh-CN","frontmatter":{"date":"2023-02-01T00:00:00.000Z","category":"性能优化","tags":["视频"],"description":"视频表现 在上一单元中，您学习了与图片相关的一些性能技术。图片是网络上广泛使用的资源类型，但要谨慎优化并考虑用户的视口，则会占用大量带宽。 但是，图片并不是网络上常见的唯一媒体类型。视频是网页上常用的另一种媒体类型。查看一些可能的优化措施之前，请务必先了解 <video> 元素的工作原理。 视频源文件 处理媒体文件时，您在操作系统中识别的文件（.mp4...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/performance/video-performance.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"视频表现"}],["meta",{"property":"og:description","content":"视频表现 在上一单元中，您学习了与图片相关的一些性能技术。图片是网络上广泛使用的资源类型，但要谨慎优化并考虑用户的视口，则会占用大量带宽。 但是，图片并不是网络上常见的唯一媒体类型。视频是网页上常用的另一种媒体类型。查看一些可能的优化措施之前，请务必先了解 <video> 元素的工作原理。 视频源文件 处理媒体文件时，您在操作系统中识别的文件（.mp4..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T10:18:51.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"视频"}],["meta",{"property":"article:published_time","content":"2023-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T10:18:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"视频表现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T10:18:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"视频源文件","slug":"视频源文件","link":"#视频源文件","children":[{"level":3,"title":"多种形式","slug":"多种形式","link":"#多种形式","children":[]}]}],"git":{"createdTime":1724483645000,"updatedTime":1724494731000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":2}]},"readingTime":{"minutes":8.2,"words":2459},"filePathRelative":"web/performance/video-performance.md","localizedDate":"2023年2月1日","excerpt":"\\n<p>在<a href=\\"/blogs/web/performance/image-performance\\">上一单元</a>中，您学习了与图片相关的一些性能技术。图片是网络上广泛使用的资源类型，但要谨慎优化并考虑用户的视口，则会占用大量带宽。</p>\\n<p>但是，图片并不是网络上常见的唯一媒体类型。视频是网页上常用的另一种媒体类型。查看一些可能的优化措施之前，请务必先了解 <code>&lt;video&gt;</code> 元素的工作原理。</p>\\n<h2>视频源文件</h2>\\n<p>处理媒体文件时，您在操作系统中识别的文件（<code>.mp4</code>、<code>.webm</code> 等）称为容器。一个容器包含一个或多个数据流。在大多数情况下，这是指视频和音频流。</p>","autoDesc":true}');export{d as comp,k as data};
