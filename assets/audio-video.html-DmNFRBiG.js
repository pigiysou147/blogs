import{_ as i,c as s,o as a,b as l}from"./app-jraesLnh.js";const t="/blogs/assets/b8cf759a74914c66cec01d50b18de6e0-nw2LNtgK.svg",e="/blogs/assets/1a86ca9ae4a3c0e208ddf2f7fdc38b95-Cr8T72WT.svg",n="/blogs/assets/f91164cbbb944d8986c90a1e93afcd82-BFxqQNjb.svg",h={},p=l('<p><small>以下内容摘录自 High Performance Browser Networking 翻译整理。如需了解完整版本和相关内容，请访问 <a href="https://hpbn.co/" target="_blank" rel="noopener noreferrer">hpbn.co</a></small></p><h2 id="音频和视频引擎" tabindex="-1"><a class="header-anchor" href="#音频和视频引擎"><span>音频和视频引擎</span></a></h2><p>要在浏览器中实现丰富的电话会议体验，浏览器必须能够访问系统硬件以捕获音频和视频 - 无需第三方插件或自定义驱动程序，只需一个简单且一致的 API。但是，原始音频和视频流本身也不够：必须对每个流进行处理以提高质量、同步，并且输出比特率必须适应客户端之间不断波动的带宽和延迟。</p><p>在接收端，该过程是相反的，客户端必须实时解码流，并能够适应网络抖动和延迟。简而言之，捕获和处理音频和视频是一个复杂的问题。然而，好消息是，WebRTC 为浏览器带来了功能齐全的音频和视频引擎，它们可以替我们处理所有信号处理，甚至更多。</p><figure><img src="'+t+'" alt="WebRTC 音频和视频引擎" tabindex="0" loading="lazy"><figcaption>WebRTC 音频和视频引擎</figcaption></figure><p>音频和视频引擎的完整实现和技术细节很容易成为专门书籍的主题，超出了我们的讨论范围。要了解更多信息，请访问 <em><a href="http://www.webrtc.org/" target="_blank" rel="noopener noreferrer">http://www.webrtc.org</a></em> 。</p><p>获取的音频流经过降噪和回声消除处理，然后使用优化的窄带或宽带音频编解码器之一自动编码。最后，使用特殊的错误隐藏算法来隐藏网络抖动和数据包丢失的负面影响 - 这些只是亮点！视频引擎通过优化图像质量、选择最佳压缩和编解码器设置、应用抖动和数据包丢失隐藏等方式执行类似的处理。</p><p>所有处理都由浏览器直接完成，更重要的是，浏览器会动态调整其处理管道，以适应不断变化的音频和视频流参数以及网络条件。完成所有这些工作后，Web 应用程序将收到优化的媒体流，然后可以将其输出到本地屏幕和扬声器、转发给其他应用程序，或使用 HTML5 媒体 API 之一进行后期处理！</p><h3 id="使用-getusermedia-获取音频和视频" tabindex="-1"><a class="header-anchor" href="#使用-getusermedia-获取音频和视频"><span>使用 getUserMedia 获取音频和视频</span></a></h3><p>媒体捕获和流 W3C 规范定义了一组新的 JavaScript API，使应用程序能够从平台请求音频和视频流，以及一组 API 来操作和处理获取的媒体流。对象<code>MediaStream</code>是实现所有这些功能的主要接口。</p><figure><img src="'+e+`" alt="MediaStream 携带一个或多个同步轨道" tabindex="0" loading="lazy"><figcaption>MediaStream 携带一个或多个同步轨道</figcaption></figure><ul><li>MediaStream 对象由一个或多个单独的轨道 (MediaStreamTrack) 组成。</li><li>MediaStream 对象内的轨道彼此同步。</li><li>输入源可以是物理设备，例如麦克风、网络摄像头或者来自用户硬盘或远程网络对等点的本地或远程文件。</li><li>MediaStream 的输出可以发送到一个或多个目的地：本地视频或音频元素、用于后期处理的 JavaScript 代码或远程对等点。</li></ul><p>MediaStream 对象表示实时媒体流，允许应用程序代码获取数据、操作各个轨道并指定输出。所有音频和视频处理（例如噪音消除、均衡、图像增强等）均由音频和视频引擎自动处理。</p><p>但是，获取的媒体流的功能受到输入源功能的限制：麦克风只能发出音频流，而某些网络摄像头可以产生比其他摄像头更高分辨率的视频流。因此，在浏览器中请求媒体流时，API<code>getUserMedia()</code>允许我们指定强制和可选约束列表，以满足应用程序的需求：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> autoplay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!-- 1 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> constraints</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    audio</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    video</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      mandatory</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//4</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        width</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">min</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 320</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        height</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">min</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 180</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      optional</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">width</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">max</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1280</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">frameRate</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">facingMode</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;user&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  navigator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUserMedia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">constraints</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">gotStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">logError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> gotStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//7</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> video</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;video&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">src</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createObjectURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> logError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>HTML 视频输出元素</li><li>请求强制音轨</li><li>请求强制视频曲目</li><li>视频轨道强制约束列表</li><li>视频轨道的可选约束数组</li><li>从浏览器请求音频和视频流</li><li>回调函数处理获取的MediaStream</li></ol><p>此示例说明了一种更为复杂的场景：我们正在请求音频和视频轨道，并指定必须使用的最低分辨率和摄像头类型，以及 720p 高清视频的可选约束列表！API <code>getUserMedia()</code>负责向用户请求对麦克风和摄像头的访问权限，并获取符合指定约束的流 — 这就是旋风之旅。</p><p>提供的 API 还使应用程序能够操作单个轨道、克隆轨道、修改约束等。此外，获取流后，我们可以将其输入到各种其他浏览器 API 中：</p><ul><li>Web Audio API 支持在浏览器中处理音频。</li><li>Canvas API 支持捕获和后期处理单个视频帧。</li><li>CSS3 和 WebGL API 可以在输出流上应用各种 2D/3D 效果。</li></ul><p>长话短说，<code>getUserMedia()</code>这是一个从底层平台获取音频和视频流的简单 API。媒体由 WebRTC 音频和视频引擎自动优化、编码和解码，然后路由到一个或多个输出。这样，我们就完成了构建实时电话会议应用程序的一半——我们只需要将数据路由到对等端！</p><p>有关媒体捕获和流 API 功能的完整列表，请参阅<a href="http://www.w3.org/TR/mediacapture-streams" target="_blank" rel="noopener noreferrer">官方 W3C 标准</a>。</p><h4 id="音频-opus-和视频-vp8-比特率" tabindex="-1"><a class="header-anchor" href="#音频-opus-和视频-vp8-比特率"><span>音频 (OPUS) 和视频 (VP8) 比特率</span></a></h4><p>从浏览器请求音频和视频时，请仔细注意流的大小和质量。虽然硬件可能能够捕获高清质量的流，但 CPU 和带宽必须能够跟上！当前的 WebRTC 实现使用 Opus 和 VP8 编解码器：</p><ul><li>Opus 编解码器用于音频，支持恒定和可变比特率编码，需要 6-510 Kbit/s 的带宽。好消息是，该编解码器可以无缝切换并适应可变带宽。</li><li>用于视频编码的 VP8 编解码器也需要 100–2,000+ Kbit/s 的带宽，比特率取决于流的质量： <ul><li>720p，30 FPS：1.0~2.0 Mbps</li><li>360p，30 FPS：0.5~1.0 Mbps</li><li>180p，30 FPS：0.1~0.5 Mbps</li></ul></li></ul><p>因此，单方高清通话可能需要高达 2.5+ Mbps 的网络带宽。如果再增加几个通话方，通话质量必然会下降，以满足额外的带宽以及 CPU、GPU 和内存处理要求。</p><h2 id="实时网络传输" tabindex="-1"><a class="header-anchor" href="#实时网络传输"><span>实时网络传输</span></a></h2><p>实时通信对时间敏感；这并不奇怪。因此，音频和视频流应用程序被设计为容忍间歇性数据包丢失：音频和视频编解码器可以填补小的数据空白，通常对输出质量的影响最小。同样，应用程序必须实现自己的逻辑来从丢失或延迟的携带其他类型应用程序数据的数据包中恢复。及时性和低延迟可能比可靠性更重要。</p><p>音频和视频流尤其需要适应我们大脑的独特特性。事实证明，我们非常擅长填补空白，但对延迟非常敏感。在音频流中添加一些可变延迟，“感觉不对劲”，但在中间删除几个样本，我们大多数人甚至都不会注意到！</p><p>对时效性的要求高于可靠性，这是 UDP 协议成为实时数据传输首选传输协议的主要原因。TCP 传输可靠、有序的数据流：如果中间数据包丢失，则 TCP 会缓冲其后的所有数据包，等待重新传输，然后按顺序将数据流传输给应用程序。相比之下，UDP 提供以下“非服务”：</p><ul><li><p>不保证消息传递</p><ul><li>无确认、重传或超时。</li></ul></li><li><p>不保证交货顺序</p><ul><li>没有数据包序列号、没有重新排序、没有队头阻塞。</li></ul></li><li><p>没有连接状态跟踪</p><ul><li>没有连接建立或拆除状态机。</li></ul></li><li><p>无拥塞控制</p><ul><li>没有内置客户端或网络反馈机制。</li></ul></li></ul><p>UDP 不保证数据的可靠性或顺序，并在每个数据包到达时立即将其传送给应用程序。实际上，它是我们网络堆栈的 IP 层提供的尽力而为交付模型的薄包装。</p><p>WebRTC 在传输层使用 UDP：延迟和及时性至关重要。有了它，我们就可以发送音频、视频和应用程序 UDP 数据包，一切就绪了，对吧？嗯，不完全是。我们还需要机制来穿越多层 NAT 和防火墙，协商每个流的参数，提供用户数据加密，实现拥塞和流量控制等等！</p><p>UDP 是浏览器实时通信的基础，但为了满足 WebRTC 的所有要求，浏览器还需要大量的支持协议和服务</p><figure><img src="`+n+'" alt="WebRTC 协议栈" tabindex="0" loading="lazy"><figcaption>WebRTC 协议栈</figcaption></figure><ul><li>ICE：交互式连接建立（RFC 5245） <ul><li>STUN：NAT 会话遍历实用程序 (RFC 5389)</li><li>TURN: 使用中继绕过 NAT (RFC 5766)</li></ul></li><li>SDP：会话描述协议（RFC 4566）</li><li>DTLS：数据报传输层安全性（RFC 6347）</li><li>SCTP：流控制传输协议（RFC 4960）</li><li>SRTP：安全实时传输协议（RFC 3711）</li></ul><p>ICE、STUN 和 TURN 是建立和维护通过 UDP 建立的对等连接所必需的。DTLS 用于保护对等端之间的所有数据传输；加密是 WebRTC 的必备功能。最后，SCTP 和 SRTP 是用于多路复用不同流、提供拥塞和流量控制以及在 UDP 之上提供部分可靠交付和其他附加服务的应用协议。</p><p>是的，这是一个复杂的堆栈，而且毫不奇怪，在讨论端到端性能之前，我们需要了解每个堆栈在底层是如何工作的。这将是一场旋风之旅，但这是我们本章剩余部分的重点。让我们深入研究一下。</p><p>我们并没有忘记 SDP！正如我们将看到的，SDP 是一种用于协商对等连接参数的数据格式。但是，SDP“提供”和“回答”是在带外通信的，这就是协议图中缺少 SDP 的原因。</p>',38),k=[p];function r(d,g){return a(),s("div",null,k)}const B=i(h,[["render",r],["__file","audio-video.html.vue"]]),c=JSON.parse('{"path":"/posts/network/audio-video.html","title":"WebRTC音视频和传输","lang":"zh-CN","frontmatter":{"title":"WebRTC音视频和传输","date":"2024-06-04T00:00:00.000Z","category":"network","tags":["webrtc"],"description":"以下内容摘录自 High Performance Browser Networking 翻译整理。如需了解完整版本和相关内容，请访问 hpbn.co 音频和视频引擎 要在浏览器中实现丰富的电话会议体验，浏览器必须能够访问系统硬件以捕获音频和视频 - 无需第三方插件或自定义驱动程序，只需一个简单且一致的 API。但是，原始音频和视频流本身也不够：必须对每...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/posts/network/audio-video.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"WebRTC音视频和传输"}],["meta",{"property":"og:description","content":"以下内容摘录自 High Performance Browser Networking 翻译整理。如需了解完整版本和相关内容，请访问 hpbn.co 音频和视频引擎 要在浏览器中实现丰富的电话会议体验，浏览器必须能够访问系统硬件以捕获音频和视频 - 无需第三方插件或自定义驱动程序，只需一个简单且一致的 API。但是，原始音频和视频流本身也不够：必须对每..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T07:14:05.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"webrtc"}],["meta",{"property":"article:published_time","content":"2024-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T07:14:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebRTC音视频和传输\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T07:14:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"音频和视频引擎","slug":"音频和视频引擎","link":"#音频和视频引擎","children":[{"level":3,"title":"使用 getUserMedia 获取音频和视频","slug":"使用-getusermedia-获取音频和视频","link":"#使用-getusermedia-获取音频和视频","children":[]}]},{"level":2,"title":"实时网络传输","slug":"实时网络传输","link":"#实时网络传输","children":[]}],"git":{"createdTime":1724483645000,"updatedTime":1724483645000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":1}]},"readingTime":{"minutes":8.54,"words":2561},"filePathRelative":"posts/network/audio-video.md","localizedDate":"2024年6月4日","excerpt":"<p><small>以下内容摘录自 High Performance Browser Networking 翻译整理。如需了解完整版本和相关内容，请访问 <a href=\\"https://hpbn.co/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">hpbn.co</a></small></p>\\n<h2>音频和视频引擎</h2>\\n<p>要在浏览器中实现丰富的电话会议体验，浏览器必须能够访问系统硬件以捕获音频和视频 - 无需第三方插件或自定义驱动程序，只需一个简单且一致的 API。但是，原始音频和视频流本身也不够：必须对每个流进行处理以提高质量、同步，并且输出比特率必须适应客户端之间不断波动的带宽和延迟。</p>","autoDesc":true}');export{B as comp,c as data};
