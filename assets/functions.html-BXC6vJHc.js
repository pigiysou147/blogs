import{_ as a,r,c as n,e as s,d as i,o as t}from"./app-BF8dx1V3.js";const l="/blogs/assets/a-diagram-a-function-de-e40ae94dbccc1-Lbs59Rgs.svg",d={},h=i('<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><p>到目前为止，您已经在本课程中了解了几个 CSS 函数。在 <a href="/web/css/grid" target="_blank" rel="noopener noreferrer">grid</a> 模块中，我们介绍了 <code>minmax()</code> 和 <code>fit-content()</code>，它们可以帮助您调整元素大小。在 <a href="/web/css/color" target="_blank" rel="noopener noreferrer">color</a> 模块中，我们介绍了 <code>rgb()</code> 和 <code>hsl()</code>，它们可帮助您定义颜色。</p><p>与许多其他编程语言一样，<a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Functions" target="_blank" rel="noopener noreferrer">CSS 提供了大量内置函数</a>，您可以在需要时随时访问它们。</p><p>每个 CSS 函数都有特定的用途。在本课程中，您将大致了解这些函数，从而更好地了解它们的使用场景和使用方式。</p><h2 id="什么是函数" tabindex="-1"><a class="header-anchor" href="#什么是函数"><span>什么是函数？</span></a></h2><p>函数是完成特定任务的独立命名代码段。 由于已命名函数，因此您可以在代码中调用该函数，并可向该函数传递数据。这称为传递参数。</p><figure><img src="'+l+`" alt="上述函数示意图" tabindex="0" loading="lazy"><figcaption>上述函数示意图</figcaption></figure><p>许多 CSS 函数都是纯函数，也就是说，如果您将相同的参数传递给函数，则无论您代码的其余部分发生了什么，它们都会返回相同的结果。当 CSS 中的值发生更改时，这些函数通常会重新计算，类似于该语言中的其他元素，例如计算的级联值，例如 <code>currentColor</code>。</p><p>在 CSS 中，您只能使用所提供的函数，而不能自行编写函数，但在某些情况下，函数可以相互嵌套，从而赋予它们更大的灵活性。我们将在本单元后面的部分对此进行详细介绍。</p><h2 id="功能选择器" tabindex="-1"><a class="header-anchor" href="#功能选择器"><span>功能选择器</span></a></h2><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.post</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> :is</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> h2</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> h3</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    line-height: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您学习了<a href="/web/css/pseudo-classes" target="_blank" rel="noopener noreferrer">伪类模块</a>中的功能选择器，其中详细介绍了 <a href="https://developer.mozilla.org/docs/Web/CSS/:is" target="_blank" rel="noopener noreferrer"><code>:is()</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/:not" target="_blank" rel="noopener noreferrer"><code>:not()</code></a> 等函数。传递到这些函数的参数为 CSS 选择器，然后对它们进行求值。 如果存在与元素匹配的元素，则系统会将其余 <strong>CSS 规则</strong>应用于这些元素。</p><h2 id="自定义属性和-var" tabindex="-1"><a class="header-anchor" href="#自定义属性和-var"><span>自定义属性和 <code>var()</code></span></a></h2><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    --base-color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">ff00ff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    background: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">--base-color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义属性是一种变量，可用于对 CSS 代码中的值进行标记化。<a href="https://piccalil.li/tutorial/getting-started-with-css-custom-properties/" target="_blank" rel="noopener noreferrer">自定义属性也会受级联的影响</a>，这意味着可以在上下文中操作或重新定义自定义属性。自定义属性必须以两个短划线 (<code>--</code>) 为前缀，并且区分大小写。</p><p><a href="https://developer.mozilla.org/docs/Web/CSS/var()" target="_blank" rel="noopener noreferrer"><code>var()</code></a> 函数接受一个必需参数：您尝试作为值返回的自定义属性。在上面的代码段中，<code>var()</code> 函数将 <code>--base-color</code> 作为参数传递。如果定义了 <code>--base-color</code>，则 <code>var()</code> 将返回该值。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    background: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">--base-color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">hotpink</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以将回退声明值传入 <code>var()</code> 函数。这意味着，如果找不到 <code>--base-color</code>，系统会改用所传递的<strong>声明</strong>，在本例中，该声明为 <code>hotpink</code> 颜色。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/zYNPOjP?height=250&amp;theme-id=light&amp;default-tab=css%2Cresult&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Codepen 上 web-dot-dev 的 Pen zYNPOjP" style="color-scheme:initial;box-sizing:inherit;border:0px;height:250px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h2 id="返回值的函数" tabindex="-1"><a class="header-anchor" href="#返回值的函数"><span>返回值的函数</span></a></h2><p><code>var()</code> 函数只是一个可返回值的 CSS 函数。<a href="https://developer.mozilla.org/docs/Web/CSS/attr()" target="_blank" rel="noopener noreferrer"><code>attr()</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/url()" target="_blank" rel="noopener noreferrer"><code>url()</code></a> 等函数遵循与 <code>var()</code> 类似的结构，您需要传递一个或多个参数，并在 CSS 声明的<strong>右侧</strong>使用它们。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">::after</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    content: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">attr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>attr()</code> 函数会获取 <code>元素的 \`href\` 属性的内容，并将其设为 \`::after\` 伪元素的 \`content\`。如果</code> 元素的 <code>href</code> 属性的值发生更改，这会自动反映在此 <code>content</code> 属性中。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    background-image: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/path/to/image.jpg&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>url()</code> 函数采用字符串网址作为参数，用于加载图片、字体和内容。 如果未传入有效网址或找不到网址指向的资源，则 <code>url()</code> 函数不会返回任何内容。</p><h2 id="颜色函数" tabindex="-1"><a class="header-anchor" href="#颜色函数"><span>颜色函数</span></a></h2><p>您已经在 <a href="/web/css/color" target="_blank" rel="noopener noreferrer">color</a> 模块中全面了解了颜色函数。如果您还没有读过此类内容，强烈建议您读一读。</p><p>CSS 中一些可用的颜色函数包括 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code>、<code>hwb()</code>、<code>lab()</code> 和 <code>lch()</code>。所有这些对象的形式都类似，其中传入配置参数，然后返回颜色。</p><h2 id="数学表达式" tabindex="-1"><a class="header-anchor" href="#数学表达式"><span>数学表达式</span></a></h2><p>与许多其他编程语言一样，CSS 也提供实用的数学函数来协助进行各种类型的计算。</p><h3 id="calc" tabindex="-1"><a class="header-anchor" href="#calc"><span>calc()</span></a></h3>`,31),o=i(`<p><a href="https://developer.mozilla.org/docs/Web/CSS/calc()" target="_blank" rel="noopener noreferrer"><code>calc()</code></a> 函数接受单个数学表达式作为其参数。此数学表达式可以组合多种类型，如长度、数字、角度和频率。单位也可以混用。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">calc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，<code>calc()</code> 函数用于将某个元素的宽度调整为其所属父元素的 100%，然后移除该计算值的 <code>2rem</code>。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/PopYema?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen PopYema" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    --root-height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">calc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">calc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">calc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">--root-height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>calc()</code> 函数可以嵌套在另一个 <code>calc()</code> 函数中。您还可以将自定义属性作为表达式的一部分在 <code>var()</code> 函数中传递。</p><h3 id="min-和max" tabindex="-1"><a class="header-anchor" href="#min-和max"><span><code>min()</code>和<code>max()</code></span></a></h3>`,7),p=i(`<p><a href="https://developer.mozilla.org/docs/Web/CSS/min()" target="_blank" rel="noopener noreferrer"><code>min()</code></a> 函数会返回一个或多个已传递参数的最小计算值。<a href="https://developer.mozilla.org/docs/Web/CSS/max()" target="_blank" rel="noopener noreferrer"><code>max()</code></a> 函数则相反：获取一个或多个传递的参数中的最大值。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">vw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">vh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，宽度应为 <code>20vw</code>（视口宽度的 20%）和 <code>30rem</code> 之间的最小值。高度应为 <code>20vh</code>（即<strong>视口高度</strong>的 20%）到 <code>20rem</code> 之间的最大值。</p><p><strong>注意</strong> ：我们在 <a href="/web/css/sizing" target="_blank" rel="noopener noreferrer">ssize</a> 单位模块中介绍了 <code>vw</code> 和 <code>vh</code> 等单位。</p><h3 id="clamp" tabindex="-1"><a class="header-anchor" href="#clamp"><span>clamp()</span></a></h3>`,5),k=i(`<p><a href="https://developer.mozilla.org/docs/Web/CSS/clamp()" target="_blank" rel="noopener noreferrer"><code>clamp()</code></a> 函数采用三个参数：最小大小、理想大小和最大大小。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    font-size: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">clamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">vw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">rem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，<code>font-size</code> 将根据视口的宽度保持自适应。将 <code>vw</code> 单位添加到 <code>rem</code> 单位以帮助进行屏幕缩放，因为无论缩放级别如何，<code>vw</code> 单位的大小都是相同的。根据根字字体大小乘以 <code>rem</code> 单位，可以为 <code>clamp()</code> 函数提供相对计算点。</p><h2 id="形状" tabindex="-1"><a class="header-anchor" href="#形状"><span>形状</span></a></h2><p><a href="https://developer.mozilla.org/docs/Web/CSS/clip-path" target="_blank" rel="noopener noreferrer"><code>clip-path</code></a>、<a href="https://developer.mozilla.org/docs/Web/CSS/offset-path" target="_blank" rel="noopener noreferrer"><code>offset-path</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/shape-outside" target="_blank" rel="noopener noreferrer"><code>shape-outside</code></a> CSS 属性使用形状直观地裁剪方框或提供形状，让内容四处移动。</p><p>有一些形状函数可用于这两种属性。<a href="https://developer.mozilla.org/docs/Web/CSS/basic-shape/circle()" target="_blank" rel="noopener noreferrer"><code>circle()</code></a>、<a href="https://developer.mozilla.org/docs/Web/CSS/basic-shape/ellipse()" target="_blank" rel="noopener noreferrer"><code>ellipse()</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/basic-shape/inset()" target="_blank" rel="noopener noreferrer"><code>inset()</code></a> 等简单形状可使用配置参数来确定其大小。更复杂的形状（例如 <a href="https://developer.mozilla.org/docs/Web/CSS/basic-shape/polygon()" target="_blank" rel="noopener noreferrer"><code>polygon()</code></a>）可使用逗号分隔的 X 轴和 Y 轴值对来创建自定义形状。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.circle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    clip-path: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">circle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.polygon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    clip-path: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">polygon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 75</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">75</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 75</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">75</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 75</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 75</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/rNjYNNd?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Codepen 上的 web-dot-dev 的 Pen rNjYNNd" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>与 <code>polygon()</code> 一样，还有一个 <code>path()</code> 函数，该函数接受 SVG 填充规则作为参数。因此，可以使用 Illustrator 或 Inkscape 等图形工具绘制高度复杂的形状，然后将其复制到 CSS 中。</p><h2 id="变形" tabindex="-1"><a class="header-anchor" href="#变形"><span>变形</span></a></h2><p>在本 CSS 函数的概览中，最后介绍的是转换函数，用于倾斜、调整大小甚至更改元素的深度。以下所有函数均与 <code>transform</code> 属性一起使用。</p><h3 id="rotation" tabindex="-1"><a class="header-anchor" href="#rotation"><span>Rotation</span></a></h3>`,12),c=i(`<p>您可以使用 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/rotate()" target="_blank" rel="noopener noreferrer"><code>rotate()</code></a> 函数旋转元素，该函数会围绕元素的中心轴旋转元素。您还可以改用 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/rotateX()" target="_blank" rel="noopener noreferrer"><code>rotateX()</code></a>、<a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/rotateY()" target="_blank" rel="noopener noreferrer"><code>rotateY()</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/rotateZ()" target="_blank" rel="noopener noreferrer"><code>rotateZ()</code></a> 函数，让元素在特定轴上旋转。您可以通过传递角度、转弯和弧度单位来确定旋转角度。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">rotateX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">rotateY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">rotateZ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/MWJOWzP?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen MWJOWzP" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p><a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/rotate3d()" target="_blank" rel="noopener noreferrer"><code>rotate3d()</code></a> 函数采用四个参数。</p>`,4),g=i(`<p>前 3 个参数是数字，用于定义 X、Y 和 Z 坐标。第四个参数是旋转，与其他旋转函数一样，它接受角度、角度和转弯。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">rotate3d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/GRrOJxa?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上发布的 Pen GRrOJxa" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h3 id="扩缩" tabindex="-1"><a class="header-anchor" href="#扩缩"><span>扩缩</span></a></h3>`,4),b=i(`<p>您可以使用 <code>transform</code> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/scale()" target="_blank" rel="noopener noreferrer"><code>scale()</code></a> 函数更改元素的缩放比例。该函数接受一个或两个数字作为值，用于确定正类别或负比例。 如果您只定义一个数字参数，X 轴和 Y 轴都将按相同的缩放比例进行缩放，因此定义两者是 X 和 Y 的简写形式。与 <code>rotate()</code> 类似，有 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/scaleX()" target="_blank" rel="noopener noreferrer"><code>scaleX()</code></a>、<a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/scaleY()" target="_blank" rel="noopener noreferrer"><code>scaleY()</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/scaleZ()" target="_blank" rel="noopener noreferrer"><code>scaleZ()</code></a> 函数可用于在特定轴上缩放元素。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">scaleX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">scaleY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/vYgWOoq?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Codepen 上 web-dot-dev 的 Pen vYgWOoq" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>与 <code>rotate</code> 函数一样，还有一个 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/scale3d()" target="_blank" rel="noopener noreferrer"><code>scale3d()</code></a> 函数。这与 <code>scale()</code> 类似，但使用三个参数：X、Y 和 Z 缩放比例。</p><h3 id="翻译" tabindex="-1"><a class="header-anchor" href="#翻译"><span>翻译</span></a></h3>`,5),m=i('<p><a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/translate()" target="_blank" rel="noopener noreferrer"><code>translate()</code></a> 函数会在元素保持其在文档流中的位置时移动元素。它们接受长度和百分比值作为参数。 如果定义了一个参数，<code>translate()</code> 函数会沿 X 轴平移元素；如果定义了两个参数，则函数会沿 X 轴和 Y 轴平移元素。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">translatex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">40</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">translatey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/RwKjWgP?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen RwKjWgP" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>与其他转换函数一样，您可以使用 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/translateX()" target="_blank" rel="noopener noreferrer"><code>translateX</code></a>、<a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/translateY()" target="_blank" rel="noopener noreferrer"><code>translateY</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/translateZ()" target="_blank" rel="noopener noreferrer"><code>translateZ</code></a> 为特定轴使用特定函数。您还可以使用 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/translate3d()" target="_blank" rel="noopener noreferrer"><code>translate3d</code></a>，它允许您在一个函数中定义 X、Y 和 Z 平移。</p><h3 id="偏差" tabindex="-1"><a class="header-anchor" href="#偏差"><span>偏差</span></a></h3>',5),B=i(`<p>您可以使用接受角度作为参数的 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/skew()" target="_blank" rel="noopener noreferrer"><code>skew()</code></a> 函数使元素倾斜。<code>skew()</code> 函数的工作方式与 <code>translate()</code> 非常相似。如果您只定义一个参数，则只会影响 X 轴；如果您同时定义了这两个参数，则会影响 X 轴和 Y 轴。您还可以使用 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/skewX()" target="_blank" rel="noopener noreferrer"><code>skewX</code></a> 和 <a href="https://developer.mozilla.org/docs/Web/CSS/transform-function/skewY()" target="_blank" rel="noopener noreferrer"><code>skewY</code></a> 分别影响每个轴。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">skew</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">deg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/JjEOYMq?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Codepen 上 web-dot-dev 的 Pen JjEOYMq" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h3 id="车头朝上" tabindex="-1"><a class="header-anchor" href="#车头朝上"><span>车头朝上</span></a></h3>`,4),A=i('<p>最后，您可以使用 <a href="https://developer.mozilla.org/docs/Web/CSS/perspective" target="_blank" rel="noopener noreferrer"><code>perspective</code></a> 属性（属于转换属性系列的一部分）来更改用户与 Z 平面之间的距离。这种方式可以呈现距离感，并可用于在设计中实现景深。</p><p>David Desandro 编写的这个示例来自他们的实用文章，展示了如何使用它以及 <code>perspective-origin-x</code> 和 <code>perspective-origin-y</code> 属性来打造真正的 3D 体验。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/bMqZmr?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="Codepen 上 web-dot-dev 的 Pen bMqZmr" style="color-scheme:initial;box-sizing:inherit;border:0px;height:500px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><h2 id="动画函数、渐变和滤镜" tabindex="-1"><a class="header-anchor" href="#动画函数、渐变和滤镜"><span>动画函数、渐变和滤镜</span></a></h2><p>CSS 还提供一些函数来帮助您为元素<a href="/web/css/animations" target="_blank" rel="noopener noreferrer">添加动画效果</a>、对其应用<a href="/web/css/gradients" target="_blank" rel="noopener noreferrer">渐变</a>，以及使用图形<a href="/web/css/filters" target="_blank" rel="noopener noreferrer">过滤器</a>来操纵元素的外观。 为了使本单元尽可能简洁明了，链接的模块中会对其进行介绍。 它们都遵循与本单元演示的函数类似的结构。</p>',5);function y(v,f){const e=r("BrowseSurport");return t(),n("div",null,[h,s(e,{code:"css.types.calc"}),o,s(e,{code:"css.types.min"}),p,s(e,{code:"css.types.clamp"}),k,s(e,{code:"css.types.transform-function.rotate"}),c,s(e,{code:"css.types.transform-function.rotate3d"}),g,s(e,{code:"css.types.transform-function.scale"}),b,s(e,{code:"css.types.transform-function.translate"}),m,s(e,{code:"css.types.transform-function.skew"}),B,s(e,{code:"css.properties.perspective"}),A])}const C=a(d,[["render",y],["__file","functions.html.vue"]]),F=JSON.parse('{"path":"/web/css/functions.html","title":"函数","lang":"zh-CN","frontmatter":{"date":"2024-03-31T00:00:00.000Z","category":"css","tags":["function"],"description":"函数 到目前为止，您已经在本课程中了解了几个 CSS 函数。在 grid 模块中，我们介绍了 minmax() 和 fit-content()，它们可以帮助您调整元素大小。在 color 模块中，我们介绍了 rgb() 和 hsl()，它们可帮助您定义颜色。 与许多其他编程语言一样，CSS 提供了大量内置函数，您可以在需要时随时访问它们。 每个 CSS...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/css/functions.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"函数 到目前为止，您已经在本课程中了解了几个 CSS 函数。在 grid 模块中，我们介绍了 minmax() 和 fit-content()，它们可以帮助您调整元素大小。在 color 模块中，我们介绍了 rgb() 和 hsl()，它们可帮助您定义颜色。 与许多其他编程语言一样，CSS 提供了大量内置函数，您可以在需要时随时访问它们。 每个 CSS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T07:14:05.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"function"}],["meta",{"property":"article:published_time","content":"2024-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T07:14:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T07:14:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是函数？","slug":"什么是函数","link":"#什么是函数","children":[]},{"level":2,"title":"功能选择器","slug":"功能选择器","link":"#功能选择器","children":[]},{"level":2,"title":"自定义属性和 var()","slug":"自定义属性和-var","link":"#自定义属性和-var","children":[]},{"level":2,"title":"返回值的函数","slug":"返回值的函数","link":"#返回值的函数","children":[]},{"level":2,"title":"颜色函数","slug":"颜色函数","link":"#颜色函数","children":[]},{"level":2,"title":"数学表达式","slug":"数学表达式","link":"#数学表达式","children":[{"level":3,"title":"calc()","slug":"calc","link":"#calc","children":[]},{"level":3,"title":"min()和max()","slug":"min-和max","link":"#min-和max","children":[]},{"level":3,"title":"clamp()","slug":"clamp","link":"#clamp","children":[]}]},{"level":2,"title":"形状","slug":"形状","link":"#形状","children":[]},{"level":2,"title":"变形","slug":"变形","link":"#变形","children":[{"level":3,"title":"Rotation","slug":"rotation","link":"#rotation","children":[]},{"level":3,"title":"扩缩","slug":"扩缩","link":"#扩缩","children":[]},{"level":3,"title":"翻译","slug":"翻译","link":"#翻译","children":[]},{"level":3,"title":"偏差","slug":"偏差","link":"#偏差","children":[]},{"level":3,"title":"车头朝上","slug":"车头朝上","link":"#车头朝上","children":[]}]},{"level":2,"title":"动画函数、渐变和滤镜","slug":"动画函数、渐变和滤镜","link":"#动画函数、渐变和滤镜","children":[]}],"git":{"createdTime":1724483645000,"updatedTime":1724483645000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":1}]},"readingTime":{"minutes":11.51,"words":3453},"filePathRelative":"web/css/functions.md","localizedDate":"2024年3月31日","excerpt":"\\n<p>到目前为止，您已经在本课程中了解了几个 CSS 函数。在 <a href=\\"/web/css/grid\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">grid</a> 模块中，我们介绍了 <code>minmax()</code> 和 <code>fit-content()</code>，它们可以帮助您调整元素大小。在 <a href=\\"/web/css/color\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">color</a> 模块中，我们介绍了 <code>rgb()</code> 和 <code>hsl()</code>，它们可帮助您定义颜色。</p>","autoDesc":true}');export{C as comp,F as data};
