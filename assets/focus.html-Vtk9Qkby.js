import{_ as e,c as i,o as a,b as d}from"./app-BvxU_3ZH.js";const t={},r=d(`<h1 id="聚焦" tabindex="-1"><a class="header-anchor" href="#聚焦"><span>聚焦</span></a></h1><p>您点击自己的网页上的链接后，会跳转到网站的主要内容。 这些链接通常称为跳转链接或锚链接。 当该链接被键盘激活时，使用 <em>Tab</em> 键和 <em>Enter</em> 键，主内容容器周围会出现一个焦点环。这是为什么？</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/poRWRjp?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="来自 Codepen 上的 web-dot-dev 的 Pen poRWRjp" style="color-scheme:initial;box-sizing:inherit;border:0px;height:300px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>这是因为 <code>&lt;main&gt;</code> 具有 <code>tabindex=&quot;-1&quot;</code> 属性值，这意味着可以通过编程方式聚焦它。当定位到 <code>&lt;main&gt;</code> 时（因为浏览器网址栏中的 <code>#main-content</code> 与 <code>id</code> 匹配），它会获得程序化焦点。在这些情况下，人们往往倾向于移除焦点样式，但适当地处理焦点有助于打造易于访问的良好用户体验。这也是激发互动兴趣的好地方。</p><h2 id="为什么焦点很重要" tabindex="-1"><a class="header-anchor" href="#为什么焦点很重要"><span>为什么焦点很重要？</span></a></h2><p>作为 Web 开发者，您的职责是打造一个方便所有人访问并包容的网站。使用 CSS 创建可访问的焦点状态是这项责任的一部分。</p><p>焦点样式可以帮助使用设备（例如键盘或<a href="https://www.24a11y.com/2018/i-used-a-switch-control-for-a-day/" target="_blank" rel="noopener noreferrer">开关控件</a>）的用户浏览网站并与网站互动。如果某个元素获得焦点，但没有视觉指示，用户可能会忘记焦点所在的元素。这可能会导致导航问题，并在用户打开错误的链接等情况下引发不必要的行为。</p><p>**注意 ** ：如需详细了解无障碍对无障碍的重要性，请参阅<a href="/blogs/web/accessibility/focus">了解无障碍：专注</a>；如需详细了解如何在 HTML 中管理焦点，请参阅<a href="/blogs/web/html/focus">学习 HTML：专注</a>。## 元素如何获得焦点</p><p>某些元素可自动聚焦；这些是接受交互和输入的元素，例如 <code>&lt;a&gt;</code>、<code>&lt;button&gt;</code>、<code>&lt;input&gt;</code> 和 <code>&lt;select&gt;</code>。简而言之，就是所有表单元素、按钮和链接。 通常，您可以使用 <em>Tab</em> 键浏览网站的可聚焦元素，在页面上前进，使用 <em>shift</em> + <em>Tab</em> 键向后移动。</p><p>此外，还有一个名为 <code>tabindex</code> 的 HTML 属性，每当有人按下 Tab 键或者焦点因网址的哈希更改或 JavaScript 事件而改变时，您可以通过该属性更改 Tab 键索引（即元素的聚焦顺序）。如果将 HTML 元素的 <code>tabindex</code> 设置为 <code>0</code>，该元素可以通过 Tab 键获得焦点，并将遵循全局标签页索引（由文档源代码顺序定义）。</p><p>如果您将 <code>tabindex</code> 设为 <code>-1</code>，它只会以编程方式接收焦点，即仅在发生 JavaScript 事件或哈希更改（与网址中元素的 <code>id</code> 一致）发生时。如果您将 <code>tabindex</code> 设为任何高于 <code>0</code> 的值，它将从按文档源顺序定义的全局标签页索引中移除。Tab 键顺序现在由 <code>tabindex</code> 的值定义，因此具有 <code>tabindex=&quot;1&quot;</code> 的元素会先于具有 <code>tabindex=&quot;2&quot;</code> 的元素获得焦点。</p><p><strong>警告 ** ：遵循文档源顺序非常重要，只有</strong>绝对需要更改**时，才应更改焦点顺序。设置 <code>tabindex</code> 和使用 CSS 布局（例如 Flexbox 和网格）更改视觉顺序时，这一点都适用。如果 Web 上的内容变得不可预测，则会给用户带来难以访问的体验。## 设置焦点样式</p><p>元素获得焦点时，浏览器的默认行为是显示聚焦环。此聚焦环因浏览器和操作系统而异。</p><p>您可以通过在<a href="/blogs/web/css/pseudo-classes">伪类课程</a>中了解的 <code>:focus</code>、<code>:focus-within</code> 和 <code>:focus-visible</code> 伪类，通过 CSS 更改此行为。请务必设置与元素的默认样式形成<strong>对比</strong>的焦点样式。例如，一种常见的方法是利用 <code>outline</code> 属性。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:focus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  outline:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> solid</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> slateblue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/ZELXLMw?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen ZELXLMw" style="color-scheme:initial;box-sizing:inherit;border:0px;height:300px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p><code>outline</code> 属性看起来可能过于靠近链接的文本，但 <code>outline-offset</code> 属性可以帮助做到这一点，因为它可以增添额外的视觉 <code>padding</code>，而不会影响元素填充的几何图形大小。<code>outline-offset</code> 的正数值会向外推动轮廓，负值会将轮廓向内拉出。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/xxgXgQx?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 xxgXgQx" style="color-scheme:initial;box-sizing:inherit;border:0px;height:300px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p>目前，在某些浏览器中，如果您为元素设置了 <code>border-radius</code> 并使用 <code>outline</code>，那么两者将无法匹配 - 轮廓会具有尖角。因此，人们倾向于使用模糊处理半径较小的 <code>box-shadow</code>，因为 <code>box-shadow</code> 会裁剪至形状，并遵循 <code>border-radius</code>，但 <strong>这种样式在 Windows 高对比度模式下不会显示</strong> 。这是因为 Windows 高对比度模式不应用阴影，并且大多会忽略背景图片，从而更好地支持用户的偏好设置。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/bGgogyM?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上发布的 Pen bGgogyM" style="color-scheme:initial;box-sizing:inherit;border:0px;height:300px;width:100%;--darkreader-inline-border-top:0px;--darkreader-inline-border-right:0px;--darkreader-inline-border-bottom:0px;--darkreader-inline-border-left:0px;"></iframe><p><video></video></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>创建与元素的默认状态形成对比的焦点状态非常重要。默认浏览器样式已经为您执行了此操作，但如果您想更改此行为，请注意以下事项：</p><ul><li>避免对可以获得键盘焦点的元素使用 <code>outline: none</code>。</li><li>避免将 <code>outline</code> 样式替换为 <code>box-shadow</code>。 因为它们不会在 Windows 高对比度模式下显示</li><li>只有在绝对必要的情况下，才在 HTML 元素上为 <code>tabindex</code> 设置正值。</li><li>确保焦点状态与默认状态相比非常清晰。</li></ul>`,24),o=[r];function n(l,s){return a(),i("div",null,o)}const p=e(t,[["render",n],["__file","focus.html.vue"]]),b=JSON.parse('{"path":"/web/css/focus.html","title":"聚焦","lang":"zh-CN","frontmatter":{"date":"2024-03-31T00:00:00.000Z","category":"css","tags":["focus"],"description":"聚焦 您点击自己的网页上的链接后，会跳转到网站的主要内容。 这些链接通常称为跳转链接或锚链接。 当该链接被键盘激活时，使用 Tab 键和 Enter 键，主内容容器周围会出现一个焦点环。这是为什么？ 这是因为 <main> 具有 tabindex=\\"-1\\" 属性值，这意味着可以通过编程方式聚焦它。当定位到 <main> 时（因为浏览器网址栏中的 #ma...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/css/focus.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"聚焦"}],["meta",{"property":"og:description","content":"聚焦 您点击自己的网页上的链接后，会跳转到网站的主要内容。 这些链接通常称为跳转链接或锚链接。 当该链接被键盘激活时，使用 Tab 键和 Enter 键，主内容容器周围会出现一个焦点环。这是为什么？ 这是因为 <main> 具有 tabindex=\\"-1\\" 属性值，这意味着可以通过编程方式聚焦它。当定位到 <main> 时（因为浏览器网址栏中的 #ma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T10:18:51.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"focus"}],["meta",{"property":"article:published_time","content":"2024-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T10:18:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聚焦\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T10:18:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"为什么焦点很重要？","slug":"为什么焦点很重要","link":"#为什么焦点很重要","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1724483645000,"updatedTime":1724494731000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":2}]},"readingTime":{"minutes":5.66,"words":1699},"filePathRelative":"web/css/focus.md","localizedDate":"2024年3月31日","excerpt":"\\n<p>您点击自己的网页上的链接后，会跳转到网站的主要内容。 这些链接通常称为跳转链接或锚链接。 当该链接被键盘激活时，使用 <em>Tab</em> 键和 <em>Enter</em> 键，主内容容器周围会出现一个焦点环。这是为什么？</p>\\n<iframe allow=\\"camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;\\" loading=\\"lazy\\" src=\\"https://codepen.io/web-dot-dev/embed/poRWRjp?height=500&amp;theme-id=light&amp;default-tab=result&amp;editable=true\\" data-darkreader-inline-border-top=\\"\\" data-darkreader-inline-border-right=\\"\\" data-darkreader-inline-border-bottom=\\"\\" data-darkreader-inline-border-left=\\"\\" data-title=\\"来自 Codepen 上的 web-dot-dev 的 Pen poRWRjp\\" style=\\"color-scheme: initial; box-sizing: inherit; border: 0px; height: 300px; width: 100%; --darkreader-inline-border-top: 0px; --darkreader-inline-border-right: 0px; --darkreader-inline-border-bottom: 0px; --darkreader-inline-border-left: 0px;\\"></iframe>","autoDesc":true}');export{p as comp,b as data};
