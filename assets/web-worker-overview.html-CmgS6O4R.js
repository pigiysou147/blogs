import{_ as e,c as i,o as s,d as a}from"./app-BF8dx1V3.js";const r={},t=a(`<h1 id="web-worker-概览" tabindex="-1"><a class="header-anchor" href="#web-worker-概览"><span>Web Worker 概览</span></a></h1><p><strong>注意</strong> ：此模块简要讨论了 Web 工作器的工作原理。本文只是对 Web 工作器的概览以及关于它们如何提高性能的<a href="/web/performance/web-worker-demo" target="_blank" rel="noopener noreferrer">后续演示</a>，但并非详尽无遗。如需深入了解该主题，请参阅<a href="https://web.dev/articles/off-main-thread" target="_blank" rel="noopener noreferrer">使用 Web 工作器在浏览器的主线程中运行 JavaScript</a>。到目前为止，本课程中的许多内容侧重于诸如一般 HTML 性能考虑因素、资源提示、以缩短初始网页加载时间和针对用户输入的响应而优化各种资源类型、延迟加载特定资源等概念。</p><p>不过，本课程尚未涉及 JavaScript 的一个性能方面，那就是 Web 工作器在提高输入响应能力方面发挥的作用，而本单元和下一单元将对此进行介绍。</p><p>JavaScript 通常被描述为一种单线程语言。实际上，这是指主线程，这是浏览器执行您在浏览器中看到的大部分工作的单个线程。其中包括编写脚本、某些类型的渲染工作、HTML 和 CSS 解析以及其他类型的面向用户的工作来改善用户体验等工作。事实上，浏览器确实会使用其他线程来执行您作为开发者通常无法直接访问的工作，例如 <a href="https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome/" target="_blank" rel="noopener noreferrer">GPU 线程</a>。</p><p>就 JavaScript 而言，您通常只能在主线程上执行工作，但这只是默认操作。<em>可以</em>在 JavaScript 中注册和使用其他线程。允许在 JavaScript 中实现多线程的功能称为 <a href="https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener noreferrer">Web Workers API</a>。</p><p>当您有计算成本高昂的工作无法在主线程上运行时，不会导致耗时较长任务而使页面无响应时，Web 工作器非常有用。此类任务无疑会影响网站的 <a href="https://web.dev/articles/inp" target="_blank" rel="noopener noreferrer">Interaction to Next Paint (INP)</a>，因此了解何时有工作可以完全在主线程以外完成会很有帮助。这样做有助于为主线程上的其他任务腾出更多空间，以便加快用户互动。</p><p>本单元和<a href="/web/performance/web-worker-demo" target="_blank" rel="noopener noreferrer">后续展示具体用例的演示</a>介绍了 Web 工作器。该演示本身展示了如何使用 Web 工作器执行从主线程以外的 JPEG 文件读取图片元数据的工作，以及如何将这些元数据返回主线程以供用户查看。</p><h2 id="web-worker-的启动方式" tabindex="-1"><a class="header-anchor" href="#web-worker-的启动方式"><span>Web Worker 的启动方式</span></a></h2><p>您可以通过实例化 <a href="https://developer.mozilla.org/docs/Web/API/Worker" target="_blank" rel="noopener noreferrer"><code>Worker</code> 类</a>来注册 Web 工作器。这样做时，您可以指定网页工作器代码所在的位置，浏览器将加载该代码并随后为其创建新线程。生成的线程通常称为“工作器线程”。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> myWebWorker</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newWorker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/js/my-web-worker.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，您可以在 worker 的 JavaScript 文件（在本例中为 <code>my-web-worker.js</code>）中编写代码，然后在单独的工作器线程中运行。</p><h2 id="web-worker-的限制" tabindex="-1"><a class="header-anchor" href="#web-worker-的限制"><span>Web Worker 的限制</span></a></h2><p>与在主线程上运行的 JavaScript 不同，Web Worker 无法直接访问 <a href="https://developer.mozilla.org/docs/Web/API/Window" target="_blank" rel="noopener noreferrer"><code>window</code> 上下文</a>，并且对其提供的 API 的访问受到限制。Web Worker 受到以下限制条件的约束：</p><ul><li>Web Worker 无法直接访问 DOM。</li><li>Web Worker 可以通过消息传递流水线与 <code>window</code> 上下文进行通信，这意味着 Web Worker 可以通过某种方式间接访问 DOM。</li><li>Web Worker 的作用域是 <code>self</code>，而不是 <code>window</code>。</li><li>Web Worker 范围<em>确实</em>可以访问 JavaScript 基元和构造，以及 <code>fetch</code> 等 API 和<a href="https://developer.mozilla.org/docs/Web/API/Web_Workers_API#supported_web_apis" target="_blank" rel="noopener noreferrer">相当多的其他 API</a>。</li></ul><h2 id="web-worker-如何与-window-通信" tabindex="-1"><a class="header-anchor" href="#web-worker-如何与-window-通信"><span>Web Worker 如何与 <code>window</code> <strong>通信</strong></span></a></h2><p>Web Worker 可以通过消息传递流水线与主线程的 <code>window</code> 上下文进行通信。利用此流水线，您可以将数据传送到主线程和 Web 工作器以及从主线程和 Web 工作器传输数据。如需将数据从 Web Worker 发送到主线程，您需要在 Web Worker 的上下文 (<code>self</code>) 中设置 <code>message</code> 事件</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// my-web-worker.js</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // Sends a message of &quot;Hellow, window!&quot; from the web worker:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">postMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, window!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在主线程上 <code>window</code> 上下文的脚本中，您可以使用另一个 <code>message</code> 事件接收来自网页工作器线程的消息：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// scripts.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// Creates the web worker:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> myWebWorker</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newWorker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/js/my-web-worker.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// Adds an event listener on the web worker instance that listens for messages:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">myWebWorker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,({ </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // Echoes &quot;Hello, window!&quot; to the console from the worker.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> ：对于基本任务，直接使用 Web 工作器的消息传递流水线可能没有问题。不过，如果您希望在情况开始变得越来越复杂时简化这项工作，那么诸如 <a href="https://web.dev/articles/off-main-thread#comlink_making_web_workers_less_work" target="_blank" rel="noopener noreferrer">Comlink</a> 之类的抽象会非常方便。Web 工作器的消息流水线是 Web 工作器上下文的一种方法。通过它，您可以从网页 worker 向 <code>window</code> 发送数据，用于更新 DOM，或执行必须在主线程上完成的其他工作。</p>`,20),n=[t];function l(o,h){return s(),i("div",null,n)}const p=e(r,[["render",l],["__file","web-worker-overview.html.vue"]]),d=JSON.parse('{"path":"/web/performance/web-worker-overview.html","title":"Web Worker 概览","lang":"zh-CN","frontmatter":{"date":"2023-02-01T00:00:00.000Z","category":"性能优化","tags":["Web Worker"],"description":"Web Worker 概览 注意 ：此模块简要讨论了 Web 工作器的工作原理。本文只是对 Web 工作器的概览以及关于它们如何提高性能的后续演示，但并非详尽无遗。如需深入了解该主题，请参阅使用 Web 工作器在浏览器的主线程中运行 JavaScript。到目前为止，本课程中的许多内容侧重于诸如一般 HTML 性能考虑因素、资源提示、以缩短初始网页加载...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/performance/web-worker-overview.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"Web Worker 概览"}],["meta",{"property":"og:description","content":"Web Worker 概览 注意 ：此模块简要讨论了 Web 工作器的工作原理。本文只是对 Web 工作器的概览以及关于它们如何提高性能的后续演示，但并非详尽无遗。如需深入了解该主题，请参阅使用 Web 工作器在浏览器的主线程中运行 JavaScript。到目前为止，本课程中的许多内容侧重于诸如一般 HTML 性能考虑因素、资源提示、以缩短初始网页加载..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T07:14:05.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:tag","content":"Web Worker"}],["meta",{"property":"article:published_time","content":"2023-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T07:14:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Web Worker 概览\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T07:14:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"Web Worker 的启动方式","slug":"web-worker-的启动方式","link":"#web-worker-的启动方式","children":[]},{"level":2,"title":"Web Worker 的限制","slug":"web-worker-的限制","link":"#web-worker-的限制","children":[]},{"level":2,"title":"Web Worker 如何与 window 通信","slug":"web-worker-如何与-window-通信","link":"#web-worker-如何与-window-通信","children":[]}],"git":{"createdTime":1724483645000,"updatedTime":1724483645000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":1}]},"readingTime":{"minutes":4.23,"words":1268},"filePathRelative":"web/performance/web-worker-overview.md","localizedDate":"2023年2月1日","excerpt":"\\n<p><strong>注意</strong> ：此模块简要讨论了 Web 工作器的工作原理。本文只是对 Web 工作器的概览以及关于它们如何提高性能的<a href=\\"/web/performance/web-worker-demo\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">后续演示</a>，但并非详尽无遗。如需深入了解该主题，请参阅<a href=\\"https://web.dev/articles/off-main-thread\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">使用 Web 工作器在浏览器的主线程中运行 JavaScript</a>。到目前为止，本课程中的许多内容侧重于诸如一般 HTML 性能考虑因素、资源提示、以缩短初始网页加载时间和针对用户输入的响应而优化各种资源类型、延迟加载特定资源等概念。</p>","autoDesc":true}');export{p as comp,d as data};
