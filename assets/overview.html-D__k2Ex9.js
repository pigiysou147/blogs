import{_ as i,c as e,o as s,b as t}from"./app-BvxU_3ZH.js";const a="/blogs/assets/the-tags-content-make-10a59ba9efd26-Dd3uw2F2.png",l="/blogs/assets/switch2-CqoN-RWI.svg",n="/blogs/assets/an-opening-tag-attribute-363effa33af66-CjNLaHyX.png",h={},d=t('<h1 id="html-概述" tabindex="-1"><a class="header-anchor" href="#html-概述"><span>HTML 概述</span></a></h1><p>超文本标记语言 (HTML) 是用于描述 Web 上显示的文档结构的标准标记语言。HTML 由一系列用于标记文档所有组成部分的元素和属性组成，以便采用有意义的方式组织文档。</p><p>HTML 文档基本上是一种节点树，其中包括 HTML 元素和文本节点。HTML 元素为文档提供语义和格式设置，包括创建段落、列表和表格，以及嵌入图片和表单控件。每个元素可以指定多个属性。许多元素都可以有内容，包括其他元素和文本。其他元素为空，其功能由标记和属性定义。</p><p>元素有多种类别，包括元数据、版块、文本、内嵌语义、表单、互动、媒体、组件和脚本。本系列视频中将会介绍其中的大部分内容。首先，什么是元素？</p><h2 id="元素" tabindex="-1"><a class="header-anchor" href="#元素"><span>元素</span></a></h2><p>HTML 由一系列元素组成，您可以使用这些元素封装或封装内容的不同部分，使其以特定方式显示或运行。HTML 元素用标记进行分隔，并用尖括号（<code>&lt;</code> 和 <code>&gt;</code>）编写。</p><p>网页标题是一个一级标题，我们为其使用 <code>&lt;h1&gt;</code> 标记。实际标题“机器学习研讨会”是我们元素的内容。内容位于开始标记和结束标记之间。整个元素（起始标记、结束标记和内容）都是元素。</p><figure><img src="'+a+`" alt="构成 HTML 元素的标记和内容。" tabindex="0" loading="lazy"><figcaption>构成 HTML 元素的标记和内容。</figcaption></figure><p>结束标记与起始标记相同，前面带有一条斜线。</p><p>元素和标记并不是完全相同的概念，尽管很多人会混用这两个术语。标记名称是括号中的内容。该标记包含括号。在本示例中为 <code>&lt;h1&gt;</code>。“元素”是起始标记和结束标记，以及这些标记之间的所有内容，包括嵌套元素。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;This paragraph has some</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">strong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;strongly emphasized&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">strong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  content&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此段落元素内<em>嵌套</em>了其他元素。嵌套元素时，正确嵌套元素非常重要。HTML 标记的关闭顺序应与打开顺序相反。在上面的示例中，请注意 <code>&lt;em&gt;</code> 如何在起始和结束 <code>&lt;strong&gt;</code> 标记内打开和关闭，以及 <code>&lt;strong&gt;</code> 在 <code>&lt;p&gt;</code> 标记中如何同时开启和关闭。</p><p>浏览器不会显示这些标记。这些代码用于解读网页内容。</p><p>HTML 的宽容度非常高。例如，如果我们省略 <code>&lt;/li&gt;</code> 结束标记，则隐含着这些结束标记。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Blendan Smooth</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Hoover Sukhdeep</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Toasty McToastface</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然不关闭 <code>&lt;li&gt;</code> 是有效的，但这并不是一种好的做法。必须使用结束 <code>&lt;/ul&gt;</code>。如果省略了无序列表的结束标记，则浏览器会尝试确定列表和列表项的结束标记，但您可能不同意这一决定。</p><p>每个元素的规范都会列出结束标记是否必需。该规范中的“两个标记都不例外”表示必须同时提供起始标记和结束标记。<a href="https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-omission" target="_blank" rel="noopener noreferrer">该规范提供了所有必需的结束标记</a>。</p><p>如果之前示例中的 <code>&lt;em&gt;</code> 或 <code>&lt;strong&gt;</code> 尚未关闭，那么浏览器不一定会为您关闭该元素。不关闭 <code>&lt;em&gt;</code> 只会导致内容的呈现方式与您的预期不同。如果省略了 <code>&lt;/ul&gt;</code>，且下一个标记是列表父级容器的结束标记，那么您就很幸运了。另一方面，如果它是起始 <code>&lt;h1&gt;</code> 标记，则浏览器会假定标头是列表的一部分，包括继承样式。有些省略的结束标记会导致更大的问题：不结束某些标记（例如 <code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;template&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;title&gt;</code>）会破坏后续内容，如以下示例所示。</p><iframe allow="camera; clipboard-read; clipboard-write; encrypted-media; geolocation; microphone; midi;" loading="lazy" src="https://codepen.io/web-dot-dev/embed/VwxzBLq?height=500&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;editable=true" data-darkreader-inline-border-top="" data-darkreader-inline-border-right="" data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-title="由 web-dot-dev 在 Codepen 上开发的 Pen VwxzBLq"></iframe><p>无意中将某些内容设为斜体或缩进标题，不会破坏您的业务。您的大部分内容在 200x300 的文本区域中显示为未设置样式，因为您忘记添加 <code>&lt;/textarea&gt;</code>，或者由于忘记关闭 <code>&lt;/style&gt;</code> 而根本不显示，会导致网站无法使用。</p><p>在某些情况下，即使标记中不存在这些标记，浏览器也会包含这些元素。由于元素是隐式的，因此即使标记不存在，元素也可能存在。即使您没有在内容周围添加 <code>&lt;body&gt;&lt;/body&gt;</code>，浏览器也会在表格行周围添加 <code>&lt;tbody&gt;&lt;/tbody&gt;</code>。不过，虽然省略标记是有效的，但请不要这样做。此外，如前所述，请确保它们的嵌套正确无误。您日后担任标记维护者，以及负责代码库的其他任何人，都将感激您。</p><p>元素有两种类型：被替换和未替换。</p><h3 id="未替换的元素" tabindex="-1"><a class="header-anchor" href="#未替换的元素"><span>未替换的元素</span></a></h3><p>上一部分中标记的段落、标题和列表均不会被替换。未被替换的元素周围会有起始标记和（有时可选）结束标记，这些标记可以包含文本和其他标记作为子元素。这些封装标签可将短语或图片转换为超链接、将句子转换为标题、对字词给予强调，等等。</p><h3 id="替换的元素和空元素" tabindex="-1"><a class="header-anchor" href="#替换的元素和空元素"><span>替换的元素和空元素</span></a></h3><p>系统会将所替换的元素替换为对象，例如在大多数表单控件下为图形界面 (UI) 微件，或者（对于大多数图片而言，为光栅或可缩放图片文件）。每个 都由 对象所取代，都具有默认外观。适用的样式会受到限制，具体取决于对象的类型和浏览器。例如，大多数浏览器都启用了界面 widget 和相关伪元素的有限样式设置。对于光栅图像，可以使用 CSS 轻松完成高度、宽度、裁剪和过滤，但其他操作不多。另一方面，使用基于类似于 HTML 的 XML 的标记语言的可缩放矢量图形可完全缩放（除非它们包含光栅图片）。还可以设置各种样式。请注意，能否通过链接到嵌入 SVG 的 HTML 文件的 CSS 设置嵌入的 SVG 的样式，取决于 SVG 的设置方式。</p><p>在此示例中，<code>&lt;img&gt;</code> 和 <code>&lt;input&gt;</code> 这两个被替换的元素分别被替换为非文本内容：图片和图形界面对象。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;range&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;switch.svg&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> alt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;light switch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述 HTML 的输出：</p><p>[ ] <img src="`+l+`" alt="照明开关" loading="lazy"></p><p>被替换的元素和空元素通常会混淆。Void 元素均为自闭合元素，并由一个标记表示。这意味着，void 元素并不存在结束标记之类的内容。或者，您也可以在代码末尾添加一条斜线，很多人都认为这样会使标记更易于阅读。继续讨论此示例，我们使用斜杠自行结束标记：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;range&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;switch.svg&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> alt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;light switch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>末尾的斜线属于旧式：这表示元素会自动关闭，没有匹配的结束或结束标记。</p><p>Void 元素不能包含文本内容或嵌套元素。Void 元素包括 <code>&lt;br&gt;</code>、<code>&lt;col&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;source&gt;</code>、<code>&lt;track&gt;</code> 和 <code>&lt;wbr&gt;</code> 等。</p><p>大部分被替换的元素都是空元素，但不是全部元素。<code>video</code>、<code>picture</code>、<code>object</code> 和 <code>iframe</code> 元素会被替换，但并不为空。它们都可以包含其他元素或文本，因此它们都有一个结束标记。</p><p>大多数空元素都会被替换；但同样，并非所有空元素都会被替换，如 <code>base</code>、<code>link</code>、<code>param</code> 和 <code>meta</code> 所示。为什么有一个空元素，其中没有任何内容，因为没有被替换，因而不会在屏幕上呈现任何内容？以便提供有关内容的信息！信息由元素的属性提供。</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><p>您可能已经注意到，<code>&lt;img&gt;</code> 和 <code>&lt;input</code>&gt; 示例的起始标记中不仅包含元素类型，这些用空格分隔的名称/值对（尽管有时可选择添加值）的多余位称为“属性”。属性使得 HTML 如此强大。在本系列中，我们将介绍数百个属性和属性值，但在这里，我们仅讨论一般属性和添加方法。</p><p>属性提供元素的相关信息。与起始标记的其余部分一样，此属性不会出现在内容中，但它们有助于确定内容对视力正常的用户和非视力用户（辅助技术和搜索引擎）用户的显示方式。</p><p>属性仅显示在起始标记中。起始标记始终以元素类型开头。类型后面可以跟零个或多个属性，属性之间可以用一个或多个空格分隔。大多数属性名称后跟一个等号，等同于属性值，并用左引号和右引号括起来。</p><figure><img src="`+n+'" alt="带属性的起始标记。" tabindex="0" loading="lazy"><figcaption>带属性的起始标记。</figcaption></figure><p>在此示例中，我们有一个包含两个属性的锚链接。这两个属性已将内容“Registration”（注册）转换为内部锚链接，当用户点击、点按或使用键盘或其他设备激活该链接时，该链接会滚动到当前浏览器标签页中的 <code>id=&quot;register&quot;</code> 属性。</p><p>属性定义了元素的行为、关联和功能。我们将在本系列的<a href="/blogs/web/html/attributes">属性</a>部分介绍更多属性。目前只需注意，有些属性是全局性的，这意味着它们可以出现在任何元素的开始标记中。有些仅适用于部分元素，而非全部，而有些则只适用于元素，只与单个元素相关。</p><p>大多数属性都是名称/值对。布尔值属性（其值为 true、false 或与属性名称相同）可以仅作为属性包含在内：该值不是必需的。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;switch.svg&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> alt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;light switch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ismap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此图片有三个属性：<code>src</code>、<code>alt</code> 和 <code>ismap</code>。<code>src</code> 属性用于提供 SVG 图片资源的位置。<code>alt</code> 属性提供描述图片内容的替代文本。<code>ismap</code> 属性为布尔值，不需要值。这只是解释什么是属性。我们将在<a href="/blogs/web/html/images">图片</a>部分详细介绍这些属性。</p><p>虽然您并不总是要求用引号括住属性，但有时也确实这么做。如果值包含空格或特殊字符，就需要使用引号。因此，始终建议使用引号。如果属性值已加引号，则属性之间可以添加一个或多个空格，但为了安全起见，为了方便阅读，建议使用引号和空格。</p><p>HTML 不区分大小写，但部分属性值区分大小写。规范中定义的值不区分大小写。未定义为关键字的字符串通常区分大小写，包括 <code>id</code> 和 <code>class</code> 值。</p><p>请注意，如果某个属性值在 HTML 中区分大小写，那么在 CSS 和 JavaScript 中用作<a href="https://developer.mozilla.org/docs/Web/CSS/Attribute_selectors" target="_blank" rel="noopener noreferrer">属性选择器</a>的一部分时，则区分大小写。</p><p>为了使标记更易于阅读，我们建议您（但并非必须）在标记的所有元素名称和属性名称中使用小写字母标记 HTML，并引用所有属性值。如果您听说过“XHTML 样式标记”这一术语，就会明白这是什么意思，以及以斜杠结尾的自闭空元素。</p><h2 id="元素的外观" tabindex="-1"><a class="header-anchor" href="#元素的外观"><span>元素的外观</span></a></h2><p>语义元素的默认外观由用户代理样式表设置。大多数浏览器都会出于这一目的使用实际的样式表，而另一些浏览器则是在代码中模拟这些样式表。最终的结果都是一样的。尽管 HTML 规范规定了用户代理样式表的一些限制，但浏览器有很多宽限，这意味着不同浏览器之间存在一些差异。</p><p>由于标签具有语义含义，因此您选择的元素以及您使用的标签应当适合您显示的内容。元素的语义（即 <code>role</code>）对于辅助技术和（在某些情况下）搜索引擎非常重要。<a href="/blogs/web/html/semantic-html"></a>HTML 应该用于设计内容的结构，而不是定义内容的外观。外观是 CSS 的一大重点。虽然许多会改变内容外观的元素（例如 <code>&lt;h1&gt;</code>、<code>&lt;strong&gt;</code> 和 <code>&lt;em&gt;</code>）都具有语义含义，但外观可以而且通常会随作者样式而改变。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;This header has both &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">strong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;strong&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">strong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; and &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;emphasized&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; content&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="元素、属性和-javascript" tabindex="-1"><a class="header-anchor" href="#元素、属性和-javascript"><span>元素、属性和 JavaScript</span></a></h2><p>文档对象模型 (DOM) 是 HTML 文档结构和内容的数据表示。浏览器在解析 HTML 时，会为遇到的每个元素和文本部分创建一个 JavaScript 对象。这些对象称为节点，分别是元素节点和文本节点。</p><p>有一个接口可以定义每个 HTML 元素的功能。<a href="https://developer.mozilla.org/docs/Web/API/HTML_DOM_API" target="_blank" rel="noopener noreferrer">HTML DOM API</a> 提供了通过 DOM 访问和控制每个 HTML 元素的功能，为 HTML 元素以及从该元素继承的所有 HTML 类提供了接口。<a href="https://developer.mozilla.org/docs/Web/API/HTMLElement" target="_blank" rel="noopener noreferrer">HTMLElement</a> 接口表示 HTML 元素及其所有后代节点。所有其他元素都通过从其继承的接口来实现它。每个继承接口都有一个构造函数、方法和属性。通过继承的 HTMLElement 属性，您可以访问每个全局属性，以及 <code>input</code>、<code>pointer</code>、<code>transition</code> 和 <code>animation</code> 事件。通过单个元素的子类型（例如 <a href="https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement" target="_blank" rel="noopener noreferrer">HTMLAnchorElement</a> 和 <a href="https://developer.mozilla.org/docs/Web/API/HTMLImageElement" target="_blank" rel="noopener noreferrer">HTMLImageElement</a>），您可以访问元素特有的属性值和方法。</p>',57),p=[d];function r(o,c){return s(),e("div",null,p)}const g=i(h,[["render",r],["__file","overview.html.vue"]]),m=JSON.parse('{"path":"/web/html/overview.html","title":"HTML 概述","lang":"zh-CN","frontmatter":{"date":"2024-03-31T00:00:00.000Z","category":"html","description":"HTML 概述 超文本标记语言 (HTML) 是用于描述 Web 上显示的文档结构的标准标记语言。HTML 由一系列用于标记文档所有组成部分的元素和属性组成，以便采用有意义的方式组织文档。 HTML 文档基本上是一种节点树，其中包括 HTML 元素和文本节点。HTML 元素为文档提供语义和格式设置，包括创建段落、列表和表格，以及嵌入图片和表单控件。每个...","head":[["meta",{"property":"og:url","content":"https://pigiysou147.github.io/blogs/web/html/overview.html"}],["meta",{"property":"og:site_name","content":"silly blogs"}],["meta",{"property":"og:title","content":"HTML 概述"}],["meta",{"property":"og:description","content":"HTML 概述 超文本标记语言 (HTML) 是用于描述 Web 上显示的文档结构的标准标记语言。HTML 由一系列用于标记文档所有组成部分的元素和属性组成，以便采用有意义的方式组织文档。 HTML 文档基本上是一种节点树，其中包括 HTML 元素和文本节点。HTML 元素为文档提供语义和格式设置，包括创建段落、列表和表格，以及嵌入图片和表单控件。每个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T10:18:51.000Z"}],["meta",{"property":"article:author","content":"Silly"}],["meta",{"property":"article:published_time","content":"2024-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T10:18:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTML 概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T10:18:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Silly\\",\\"url\\":\\"https://pigiysou147.com\\"}]}"]]},"headers":[{"level":2,"title":"元素","slug":"元素","link":"#元素","children":[{"level":3,"title":"未替换的元素","slug":"未替换的元素","link":"#未替换的元素","children":[]},{"level":3,"title":"替换的元素和空元素","slug":"替换的元素和空元素","link":"#替换的元素和空元素","children":[]}]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":2,"title":"元素的外观","slug":"元素的外观","link":"#元素的外观","children":[]},{"level":2,"title":"元素、属性和 JavaScript","slug":"元素、属性和-javascript","link":"#元素、属性和-javascript","children":[]}],"git":{"createdTime":1724483645000,"updatedTime":1724494731000,"contributors":[{"name":"方勇","email":"silly@digitalgd.com.cn","commits":2}]},"readingTime":{"minutes":11.57,"words":3470},"filePathRelative":"web/html/overview.md","localizedDate":"2024年3月31日","excerpt":"\\n<p>超文本标记语言 (HTML) 是用于描述 Web 上显示的文档结构的标准标记语言。HTML 由一系列用于标记文档所有组成部分的元素和属性组成，以便采用有意义的方式组织文档。</p>\\n<p>HTML 文档基本上是一种节点树，其中包括 HTML 元素和文本节点。HTML 元素为文档提供语义和格式设置，包括创建段落、列表和表格，以及嵌入图片和表单控件。每个元素可以指定多个属性。许多元素都可以有内容，包括其他元素和文本。其他元素为空，其功能由标记和属性定义。</p>\\n<p>元素有多种类别，包括元数据、版块、文本、内嵌语义、表单、互动、媒体、组件和脚本。本系列视频中将会介绍其中的大部分内容。首先，什么是元素？</p>","autoDesc":true}');export{g as comp,m as data};
